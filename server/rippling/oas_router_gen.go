// Code generated by ogen, DO NOT EDIT.

package rippling

import (
	"net/http"
	"strings"
)

func (s *Server) notFound(w http.ResponseWriter, r *http.Request) {
	s.cfg.NotFound(w, r)
}

// ServeHTTP serves http request as defined by OpenAPI v3 specification,
// calling handler that matches the path or returning not found error.
func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	elem := r.URL.Path
	if len(elem) == 0 {
		s.notFound(w, r)
		return
	}
	args := [1]string{}
	// Static code generated router with unwrapped path search.
	switch r.Method {
	case "DELETE":
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/groups/"
			if l := len("/groups/"); len(elem) >= l && elem[0:l] == "/groups/" {
				elem = elem[l:]
			} else {
				break
			}

			// Param: "groupId"
			// Leaf parameter
			args[0] = elem
			elem = ""

			if len(elem) == 0 {
				// Leaf: DeleteGroupsGroupId
				s.handleDeleteGroupsGroupIdRequest([1]string{
					args[0],
				}, w, r)

				return
			}
		}
	case "GET":
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'c': // Prefix: "c"
				if l := len("c"); len(elem) >= l && elem[0:l] == "c" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'o': // Prefix: "ompan"
					if l := len("ompan"); len(elem) >= l && elem[0:l] == "ompan" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'i': // Prefix: "ies/current"
						if l := len("ies/current"); len(elem) >= l && elem[0:l] == "ies/current" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf: GetCompanies
							s.handleGetCompaniesRequest([0]string{}, w, r)

							return
						}
					case 'y': // Prefix: "y_activity"
						if l := len("y_activity"); len(elem) >= l && elem[0:l] == "y_activity" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf: GetCompanyActivity
							s.handleGetCompanyActivityRequest([0]string{}, w, r)

							return
						}
					}
				case 'u': // Prefix: "ustom_fields"
					if l := len("ustom_fields"); len(elem) >= l && elem[0:l] == "ustom_fields" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf: CustomFieldsGet
						s.handleCustomFieldsGetRequest([0]string{}, w, r)

						return
					}
				}
			case 'd': // Prefix: "departments"
				if l := len("departments"); len(elem) >= l && elem[0:l] == "departments" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf: GetDepartments
					s.handleGetDepartmentsRequest([0]string{}, w, r)

					return
				}
			case 'e': // Prefix: "employees"
				if l := len("employees"); len(elem) >= l && elem[0:l] == "employees" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					s.handleGetEmployeesRequest([0]string{}, w, r)

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'i': // Prefix: "include_terminated"
						if l := len("include_terminated"); len(elem) >= l && elem[0:l] == "include_terminated" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf: GetEmployeesIncludeTerminated
							s.handleGetEmployeesIncludeTerminatedRequest([0]string{}, w, r)

							return
						}
					}
					// Param: "employeeId"
					// Leaf parameter
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf: GetEmployeesEmployeeId
						s.handleGetEmployeesEmployeeIdRequest([1]string{
							args[0],
						}, w, r)

						return
					}
				}
			case 'g': // Prefix: "groups"
				if l := len("groups"); len(elem) >= l && elem[0:l] == "groups" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf: GetGroups
					s.handleGetGroupsRequest([0]string{}, w, r)

					return
				}
			case 'l': // Prefix: "le"
				if l := len("le"); len(elem) >= l && elem[0:l] == "le" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'a': // Prefix: "ave_requests"
					if l := len("ave_requests"); len(elem) >= l && elem[0:l] == "ave_requests" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf: GetLeaveRequests
						s.handleGetLeaveRequestsRequest([0]string{}, w, r)

						return
					}
				case 'v': // Prefix: "vels"
					if l := len("vels"); len(elem) >= l && elem[0:l] == "vels" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf: GetLevels
						s.handleGetLevelsRequest([0]string{}, w, r)

						return
					}
				}
			case 'm': // Prefix: "me"
				if l := len("me"); len(elem) >= l && elem[0:l] == "me" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf: GetMe
					s.handleGetMeRequest([0]string{}, w, r)

					return
				}
			case 't': // Prefix: "teams"
				if l := len("teams"); len(elem) >= l && elem[0:l] == "teams" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf: GetTeams
					s.handleGetTeamsRequest([0]string{}, w, r)

					return
				}
			case 'w': // Prefix: "work_locations"
				if l := len("work_locations"); len(elem) >= l && elem[0:l] == "work_locations" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf: GetWorkLocations
					s.handleGetWorkLocationsRequest([0]string{}, w, r)

					return
				}
			}
		}
	case "PATCH":
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/groups/"
			if l := len("/groups/"); len(elem) >= l && elem[0:l] == "/groups/" {
				elem = elem[l:]
			} else {
				break
			}

			// Param: "groupId"
			// Leaf parameter
			args[0] = elem
			elem = ""

			if len(elem) == 0 {
				// Leaf: PatchGroupsGroupId
				s.handlePatchGroupsGroupIdRequest([1]string{
					args[0],
				}, w, r)

				return
			}
		}
	case "POST":
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'a': // Prefix: "ats_candidates/push_candidate"
				if l := len("ats_candidates/push_candidate"); len(elem) >= l && elem[0:l] == "ats_candidates/push_candidate" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf: PostAtsCandidatesPushCandidate
					s.handlePostAtsCandidatesPushCandidateRequest([0]string{}, w, r)

					return
				}
			case 'g': // Prefix: "groups"
				if l := len("groups"); len(elem) >= l && elem[0:l] == "groups" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf: PostGroups
					s.handlePostGroupsRequest([0]string{}, w, r)

					return
				}
			case 'l': // Prefix: "leave_requests/"
				if l := len("leave_requests/"); len(elem) >= l && elem[0:l] == "leave_requests/" {
					elem = elem[l:]
				} else {
					break
				}

				// Param: "id"
				// Match until "/"
				idx := strings.IndexByte(elem, '/')
				if idx < 0 {
					idx = len(elem)
				}
				args[0] = elem[:idx]
				elem = elem[idx:]

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case '/': // Prefix: "/process"
					if l := len("/process"); len(elem) >= l && elem[0:l] == "/process" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf: ProcessLeaveRequests
						s.handleProcessLeaveRequestsRequest([1]string{
							args[0],
						}, w, r)

						return
					}
				}
			case 'm': // Prefix: "mark_app_installed"
				if l := len("mark_app_installed"); len(elem) >= l && elem[0:l] == "mark_app_installed" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf: PostMarkAppInstalled
					s.handlePostMarkAppInstalledRequest([0]string{}, w, r)

					return
				}
			}
		}
	case "PUT":
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/groups/"
			if l := len("/groups/"); len(elem) >= l && elem[0:l] == "/groups/" {
				elem = elem[l:]
			} else {
				break
			}

			// Param: "groupId"
			// Leaf parameter
			args[0] = elem
			elem = ""

			if len(elem) == 0 {
				// Leaf: PutGroupsGroupId
				s.handlePutGroupsGroupIdRequest([1]string{
					args[0],
				}, w, r)

				return
			}
		}
	}
	s.notFound(w, r)
}

// Route is route object.
type Route struct {
	name  string
	count int
	args  [1]string
}

// OperationID returns OpenAPI operationId.
func (r Route) OperationID() string {
	return r.name
}

// Args returns parsed arguments.
func (r Route) Args() []string {
	return r.args[:r.count]
}

// FindRoute finds Route for given method and path.
func (s *Server) FindRoute(method, path string) (r Route, _ bool) {
	var (
		args = [1]string{}
		elem = path
	)
	r.args = args
	if elem == "" {
		return r, false
	}

	// Static code generated router with unwrapped path search.
	switch method {
	case "DELETE":
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/groups/"
			if l := len("/groups/"); len(elem) >= l && elem[0:l] == "/groups/" {
				elem = elem[l:]
			} else {
				break
			}

			// Param: "groupId"
			// Leaf parameter
			args[0] = elem
			elem = ""

			if len(elem) == 0 {
				// Leaf: DeleteGroupsGroupId
				r.name = "DeleteGroupsGroupId"
				r.args = args
				r.count = 1
				return r, true
			}
		}
	case "GET":
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'c': // Prefix: "c"
				if l := len("c"); len(elem) >= l && elem[0:l] == "c" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'o': // Prefix: "ompan"
					if l := len("ompan"); len(elem) >= l && elem[0:l] == "ompan" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'i': // Prefix: "ies/current"
						if l := len("ies/current"); len(elem) >= l && elem[0:l] == "ies/current" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf: GetCompanies
							r.name = "GetCompanies"
							r.args = args
							r.count = 0
							return r, true
						}
					case 'y': // Prefix: "y_activity"
						if l := len("y_activity"); len(elem) >= l && elem[0:l] == "y_activity" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf: GetCompanyActivity
							r.name = "GetCompanyActivity"
							r.args = args
							r.count = 0
							return r, true
						}
					}
				case 'u': // Prefix: "ustom_fields"
					if l := len("ustom_fields"); len(elem) >= l && elem[0:l] == "ustom_fields" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf: CustomFieldsGet
						r.name = "CustomFieldsGet"
						r.args = args
						r.count = 0
						return r, true
					}
				}
			case 'd': // Prefix: "departments"
				if l := len("departments"); len(elem) >= l && elem[0:l] == "departments" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf: GetDepartments
					r.name = "GetDepartments"
					r.args = args
					r.count = 0
					return r, true
				}
			case 'e': // Prefix: "employees"
				if l := len("employees"); len(elem) >= l && elem[0:l] == "employees" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					r.name = "GetEmployees"
					r.args = args
					r.count = 0
					return r, true
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'i': // Prefix: "include_terminated"
						if l := len("include_terminated"); len(elem) >= l && elem[0:l] == "include_terminated" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf: GetEmployeesIncludeTerminated
							r.name = "GetEmployeesIncludeTerminated"
							r.args = args
							r.count = 0
							return r, true
						}
					}
					// Param: "employeeId"
					// Leaf parameter
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf: GetEmployeesEmployeeId
						r.name = "GetEmployeesEmployeeId"
						r.args = args
						r.count = 1
						return r, true
					}
				}
			case 'g': // Prefix: "groups"
				if l := len("groups"); len(elem) >= l && elem[0:l] == "groups" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf: GetGroups
					r.name = "GetGroups"
					r.args = args
					r.count = 0
					return r, true
				}
			case 'l': // Prefix: "le"
				if l := len("le"); len(elem) >= l && elem[0:l] == "le" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'a': // Prefix: "ave_requests"
					if l := len("ave_requests"); len(elem) >= l && elem[0:l] == "ave_requests" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf: GetLeaveRequests
						r.name = "GetLeaveRequests"
						r.args = args
						r.count = 0
						return r, true
					}
				case 'v': // Prefix: "vels"
					if l := len("vels"); len(elem) >= l && elem[0:l] == "vels" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf: GetLevels
						r.name = "GetLevels"
						r.args = args
						r.count = 0
						return r, true
					}
				}
			case 'm': // Prefix: "me"
				if l := len("me"); len(elem) >= l && elem[0:l] == "me" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf: GetMe
					r.name = "GetMe"
					r.args = args
					r.count = 0
					return r, true
				}
			case 't': // Prefix: "teams"
				if l := len("teams"); len(elem) >= l && elem[0:l] == "teams" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf: GetTeams
					r.name = "GetTeams"
					r.args = args
					r.count = 0
					return r, true
				}
			case 'w': // Prefix: "work_locations"
				if l := len("work_locations"); len(elem) >= l && elem[0:l] == "work_locations" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf: GetWorkLocations
					r.name = "GetWorkLocations"
					r.args = args
					r.count = 0
					return r, true
				}
			}
		}
	case "PATCH":
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/groups/"
			if l := len("/groups/"); len(elem) >= l && elem[0:l] == "/groups/" {
				elem = elem[l:]
			} else {
				break
			}

			// Param: "groupId"
			// Leaf parameter
			args[0] = elem
			elem = ""

			if len(elem) == 0 {
				// Leaf: PatchGroupsGroupId
				r.name = "PatchGroupsGroupId"
				r.args = args
				r.count = 1
				return r, true
			}
		}
	case "POST":
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'a': // Prefix: "ats_candidates/push_candidate"
				if l := len("ats_candidates/push_candidate"); len(elem) >= l && elem[0:l] == "ats_candidates/push_candidate" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf: PostAtsCandidatesPushCandidate
					r.name = "PostAtsCandidatesPushCandidate"
					r.args = args
					r.count = 0
					return r, true
				}
			case 'g': // Prefix: "groups"
				if l := len("groups"); len(elem) >= l && elem[0:l] == "groups" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf: PostGroups
					r.name = "PostGroups"
					r.args = args
					r.count = 0
					return r, true
				}
			case 'l': // Prefix: "leave_requests/"
				if l := len("leave_requests/"); len(elem) >= l && elem[0:l] == "leave_requests/" {
					elem = elem[l:]
				} else {
					break
				}

				// Param: "id"
				// Match until "/"
				idx := strings.IndexByte(elem, '/')
				if idx < 0 {
					idx = len(elem)
				}
				args[0] = elem[:idx]
				elem = elem[idx:]

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case '/': // Prefix: "/process"
					if l := len("/process"); len(elem) >= l && elem[0:l] == "/process" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf: ProcessLeaveRequests
						r.name = "ProcessLeaveRequests"
						r.args = args
						r.count = 1
						return r, true
					}
				}
			case 'm': // Prefix: "mark_app_installed"
				if l := len("mark_app_installed"); len(elem) >= l && elem[0:l] == "mark_app_installed" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf: PostMarkAppInstalled
					r.name = "PostMarkAppInstalled"
					r.args = args
					r.count = 0
					return r, true
				}
			}
		}
	case "PUT":
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/groups/"
			if l := len("/groups/"); len(elem) >= l && elem[0:l] == "/groups/" {
				elem = elem[l:]
			} else {
				break
			}

			// Param: "groupId"
			// Leaf parameter
			args[0] = elem
			elem = ""

			if len(elem) == 0 {
				// Leaf: PutGroupsGroupId
				r.name = "PutGroupsGroupId"
				r.args = args
				r.count = 1
				return r, true
			}
		}
	}
	return r, false
}
