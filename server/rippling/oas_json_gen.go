// Code generated by ogen, DO NOT EDIT.

package rippling

import (
	"math/bits"
	"strconv"
	"time"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"

	"github.com/ogen-go/ogen/json"
	"github.com/ogen-go/ogen/validate"
)

// Encode implements json.Marshaler.
func (s Address) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s Address) encodeFields(e *jx.Encoder) {
	{
		if s.City.Set {
			e.FieldStart("city")
			s.City.Encode(e)
		}
	}
	{
		if s.Country.Set {
			e.FieldStart("country")
			s.Country.Encode(e)
		}
	}
	{
		if s.State.Set {
			e.FieldStart("state")
			s.State.Encode(e)
		}
	}
	{
		if s.StreetLine1.Set {
			e.FieldStart("streetLine1")
			s.StreetLine1.Encode(e)
		}
	}
	{
		if s.StreetLine2.Set {
			e.FieldStart("streetLine2")
			s.StreetLine2.Encode(e)
		}
	}
	{
		if s.Zip.Set {
			e.FieldStart("zip")
			s.Zip.Encode(e)
		}
	}
}

var jsonFieldsNameOfAddress = [6]string{
	0: "city",
	1: "country",
	2: "state",
	3: "streetLine1",
	4: "streetLine2",
	5: "zip",
}

// Decode decodes Address from json.
func (s *Address) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Address to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "city":
			if err := func() error {
				s.City.Reset()
				if err := s.City.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"city\"")
			}
		case "country":
			if err := func() error {
				s.Country.Reset()
				if err := s.Country.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"country\"")
			}
		case "state":
			if err := func() error {
				s.State.Reset()
				if err := s.State.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"state\"")
			}
		case "streetLine1":
			if err := func() error {
				s.StreetLine1.Reset()
				if err := s.StreetLine1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"streetLine1\"")
			}
		case "streetLine2":
			if err := func() error {
				s.StreetLine2.Reset()
				if err := s.StreetLine2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"streetLine2\"")
			}
		case "zip":
			if err := func() error {
				s.Zip.Reset()
				if err := s.Zip.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"zip\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode Address")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Address) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Address) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s AuthenticatedUserMe) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s AuthenticatedUserMe) encodeFields(e *jx.Encoder) {
	{
		if s.Company.Set {
			e.FieldStart("company")
			s.Company.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.WorkEmail.Set {
			e.FieldStart("workEmail")
			s.WorkEmail.Encode(e)
		}
	}
}

var jsonFieldsNameOfAuthenticatedUserMe = [3]string{
	0: "company",
	1: "id",
	2: "workEmail",
}

// Decode decodes AuthenticatedUserMe from json.
func (s *AuthenticatedUserMe) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AuthenticatedUserMe to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "company":
			if err := func() error {
				s.Company.Reset()
				if err := s.Company.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "workEmail":
			if err := func() error {
				s.WorkEmail.Reset()
				if err := s.WorkEmail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"workEmail\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AuthenticatedUserMe")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s AuthenticatedUserMe) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AuthenticatedUserMe) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s Candidate) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s Candidate) encodeFields(e *jx.Encoder) {
	{
		if s.Attachments != nil {
			e.FieldStart("attachments")
			e.ArrStart()
			for _, elem := range s.Attachments {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.CandidateId.Set {
			e.FieldStart("candidateId")
			s.CandidateId.Encode(e)
		}
	}
	{
		if s.Currency.Set {
			e.FieldStart("currency")
			s.Currency.Encode(e)
		}
	}
	{
		if s.Department.Set {
			e.FieldStart("department")
			s.Department.Encode(e)
		}
	}
	{
		if s.Email.Set {
			e.FieldStart("email")
			s.Email.Encode(e)
		}
	}
	{
		if s.EmploymentType.Set {
			e.FieldStart("employmentType")
			s.EmploymentType.Encode(e)
		}
	}
	{
		if s.EquityShares.Set {
			e.FieldStart("equityShares")
			s.EquityShares.Encode(e)
		}
	}
	{
		if s.JobTitle.Set {
			e.FieldStart("jobTitle")
			s.JobTitle.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.PhoneNumber.Set {
			e.FieldStart("phoneNumber")
			s.PhoneNumber.Encode(e)
		}
	}
	{
		if s.SalaryPerUnit.Set {
			e.FieldStart("salaryPerUnit")
			s.SalaryPerUnit.Encode(e)
		}
	}
	{
		if s.SalaryUnit.Set {
			e.FieldStart("salaryUnit")
			s.SalaryUnit.Encode(e)
		}
	}
	{
		if s.SigningBonus.Set {
			e.FieldStart("signingBonus")
			s.SigningBonus.Encode(e)
		}
	}
	{
		if s.StartDate.Set {
			e.FieldStart("startDate")
			s.StartDate.Encode(e, json.EncodeDate)
		}
	}
}

var jsonFieldsNameOfCandidate = [14]string{
	0:  "attachments",
	1:  "candidateId",
	2:  "currency",
	3:  "department",
	4:  "email",
	5:  "employmentType",
	6:  "equityShares",
	7:  "jobTitle",
	8:  "name",
	9:  "phoneNumber",
	10: "salaryPerUnit",
	11: "salaryUnit",
	12: "signingBonus",
	13: "startDate",
}

// Decode decodes Candidate from json.
func (s *Candidate) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Candidate to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "attachments":
			if err := func() error {
				s.Attachments = make([]CandidateAttachmentsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem CandidateAttachmentsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Attachments = append(s.Attachments, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"attachments\"")
			}
		case "candidateId":
			if err := func() error {
				s.CandidateId.Reset()
				if err := s.CandidateId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"candidateId\"")
			}
		case "currency":
			if err := func() error {
				s.Currency.Reset()
				if err := s.Currency.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"currency\"")
			}
		case "department":
			if err := func() error {
				s.Department.Reset()
				if err := s.Department.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"department\"")
			}
		case "email":
			if err := func() error {
				s.Email.Reset()
				if err := s.Email.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"email\"")
			}
		case "employmentType":
			if err := func() error {
				s.EmploymentType.Reset()
				if err := s.EmploymentType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"employmentType\"")
			}
		case "equityShares":
			if err := func() error {
				s.EquityShares.Reset()
				if err := s.EquityShares.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"equityShares\"")
			}
		case "jobTitle":
			if err := func() error {
				s.JobTitle.Reset()
				if err := s.JobTitle.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"jobTitle\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "phoneNumber":
			if err := func() error {
				s.PhoneNumber.Reset()
				if err := s.PhoneNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phoneNumber\"")
			}
		case "salaryPerUnit":
			if err := func() error {
				s.SalaryPerUnit.Reset()
				if err := s.SalaryPerUnit.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"salaryPerUnit\"")
			}
		case "salaryUnit":
			if err := func() error {
				s.SalaryUnit.Reset()
				if err := s.SalaryUnit.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"salaryUnit\"")
			}
		case "signingBonus":
			if err := func() error {
				s.SigningBonus.Reset()
				if err := s.SigningBonus.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"signingBonus\"")
			}
		case "startDate":
			if err := func() error {
				s.StartDate.Reset()
				if err := s.StartDate.Decode(d, json.DecodeDate); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"startDate\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode Candidate")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Candidate) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Candidate) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s CandidateAttachmentsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s CandidateAttachmentsItem) encodeFields(e *jx.Encoder) {
	{
		if s.FileName.Set {
			e.FieldStart("file_name")
			s.FileName.Encode(e)
		}
	}
	{
		if s.FileURL.Set {
			e.FieldStart("file_url")
			s.FileURL.Encode(e)
		}
	}
}

var jsonFieldsNameOfCandidateAttachmentsItem = [2]string{
	0: "file_name",
	1: "file_url",
}

// Decode decodes CandidateAttachmentsItem from json.
func (s *CandidateAttachmentsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CandidateAttachmentsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "file_name":
			if err := func() error {
				s.FileName.Reset()
				if err := s.FileName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"file_name\"")
			}
		case "file_url":
			if err := func() error {
				s.FileURL.Reset()
				if err := s.FileURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"file_url\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CandidateAttachmentsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CandidateAttachmentsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CandidateAttachmentsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CandidateEmploymentType as json.
func (s CandidateEmploymentType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CandidateEmploymentType from json.
func (s *CandidateEmploymentType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CandidateEmploymentType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CandidateEmploymentType(v) {
	case CandidateEmploymentTypeCONTRACTOR:
		*s = CandidateEmploymentTypeCONTRACTOR
	case CandidateEmploymentTypeSALARIEDPT:
		*s = CandidateEmploymentTypeSALARIEDPT
	case CandidateEmploymentTypeSALARIEDFT:
		*s = CandidateEmploymentTypeSALARIEDFT
	case CandidateEmploymentTypeHOURLYFT:
		*s = CandidateEmploymentTypeHOURLYFT
	case CandidateEmploymentTypeHOURLYPT:
		*s = CandidateEmploymentTypeHOURLYPT
	case CandidateEmploymentTypeTEMP:
		*s = CandidateEmploymentTypeTEMP
	default:
		*s = CandidateEmploymentType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CandidateEmploymentType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CandidateEmploymentType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CandidateSalaryUnit as json.
func (s CandidateSalaryUnit) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CandidateSalaryUnit from json.
func (s *CandidateSalaryUnit) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CandidateSalaryUnit to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CandidateSalaryUnit(v) {
	case CandidateSalaryUnitHOUR:
		*s = CandidateSalaryUnitHOUR
	case CandidateSalaryUnitDAY:
		*s = CandidateSalaryUnitDAY
	case CandidateSalaryUnitWEEK:
		*s = CandidateSalaryUnitWEEK
	case CandidateSalaryUnitMONTH:
		*s = CandidateSalaryUnitMONTH
	case CandidateSalaryUnitPAYPERIOD:
		*s = CandidateSalaryUnitPAYPERIOD
	default:
		*s = CandidateSalaryUnit(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CandidateSalaryUnit) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CandidateSalaryUnit) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s Company) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s Company) encodeFields(e *jx.Encoder) {
	{
		if s.Address.Set {
			e.FieldStart("address")
			s.Address.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Phone.Set {
			e.FieldStart("phone")
			s.Phone.Encode(e)
		}
	}
	{
		if s.PrimaryEmail.Set {
			e.FieldStart("primaryEmail")
			s.PrimaryEmail.Encode(e)
		}
	}
	{
		if s.WorkLocations != nil {
			e.FieldStart("workLocations")
			e.ArrStart()
			for _, elem := range s.WorkLocations {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfCompany = [6]string{
	0: "address",
	1: "id",
	2: "name",
	3: "phone",
	4: "primaryEmail",
	5: "workLocations",
}

// Decode decodes Company from json.
func (s *Company) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Company to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "address":
			if err := func() error {
				s.Address.Reset()
				if err := s.Address.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"address\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "phone":
			if err := func() error {
				s.Phone.Reset()
				if err := s.Phone.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone\"")
			}
		case "primaryEmail":
			if err := func() error {
				s.PrimaryEmail.Reset()
				if err := s.PrimaryEmail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"primaryEmail\"")
			}
		case "workLocations":
			if err := func() error {
				s.WorkLocations = make([]WorkLocation, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem WorkLocation
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.WorkLocations = append(s.WorkLocations, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"workLocations\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode Company")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Company) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Company) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s CustomFields) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s CustomFields) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("Id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Required.Set {
			e.FieldStart("required")
			s.Required.Encode(e)
		}
	}
	{
		if s.Title.Set {
			e.FieldStart("title")
			s.Title.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
}

var jsonFieldsNameOfCustomFields = [4]string{
	0: "Id",
	1: "required",
	2: "title",
	3: "type",
}

// Decode decodes CustomFields from json.
func (s *CustomFields) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CustomFields to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "Id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"Id\"")
			}
		case "required":
			if err := func() error {
				s.Required.Reset()
				if err := s.Required.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"required\"")
			}
		case "title":
			if err := func() error {
				s.Title.Reset()
				if err := s.Title.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"title\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CustomFields")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CustomFields) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CustomFields) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomFieldsType as json.
func (s CustomFieldsType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CustomFieldsType from json.
func (s *CustomFieldsType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CustomFieldsType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CustomFieldsType(v) {
	case CustomFieldsTypeTEXT:
		*s = CustomFieldsTypeTEXT
	case CustomFieldsTypeDATE:
		*s = CustomFieldsTypeDATE
	case CustomFieldsTypeNUMBER:
		*s = CustomFieldsTypeNUMBER
	case CustomFieldsTypeCURRENCY:
		*s = CustomFieldsTypeCURRENCY
	case CustomFieldsTypePERCENTAGE:
		*s = CustomFieldsTypePERCENTAGE
	case CustomFieldsTypeSELECT:
		*s = CustomFieldsTypeSELECT
	case CustomFieldsTypeFILE:
		*s = CustomFieldsTypeFILE
	case CustomFieldsTypeID:
		*s = CustomFieldsTypeID
	case CustomFieldsTypeRADIO:
		*s = CustomFieldsTypeRADIO
	case CustomFieldsTypeTEXTAREA:
		*s = CustomFieldsTypeTEXTAREA
	default:
		*s = CustomFieldsType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CustomFieldsType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CustomFieldsType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s Department) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s Department) encodeFields(e *jx.Encoder) {
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Parent.Set {
			e.FieldStart("parent")
			s.Parent.Encode(e)
		}
	}
}

var jsonFieldsNameOfDepartment = [2]string{
	0: "name",
	1: "parent",
}

// Decode decodes Department from json.
func (s *Department) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Department to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "parent":
			if err := func() error {
				s.Parent.Reset()
				if err := s.Parent.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"parent\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode Department")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Department) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Department) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s Employee) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s Employee) encodeFields(e *jx.Encoder) {
	{
		if s.CustomFields.Set {
			e.FieldStart("customFields")
			s.CustomFields.Encode(e)
		}
	}
	{
		if s.Department.Set {
			e.FieldStart("department")
			s.Department.Encode(e)
		}
	}
	{
		if s.EmploymentType.Set {
			e.FieldStart("employmentType")
			s.EmploymentType.Encode(e)
		}
	}
	{
		if s.EndDate.Set {
			e.FieldStart("endDate")
			s.EndDate.Encode(e)
		}
	}
	{
		if s.FirstName.Set {
			e.FieldStart("firstName")
			s.FirstName.Encode(e)
		}
	}
	{
		if s.Gender.Set {
			e.FieldStart("gender")
			s.Gender.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.IdentifiedGender.Set {
			e.FieldStart("identifiedGender")
			s.IdentifiedGender.Encode(e)
		}
	}
	{
		if s.LastName.Set {
			e.FieldStart("lastName")
			s.LastName.Encode(e)
		}
	}
	{
		if s.Manager.Set {
			e.FieldStart("manager")
			s.Manager.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.RoleState.Set {
			e.FieldStart("roleState")
			s.RoleState.Encode(e)
		}
	}
	{
		if s.SpokeId.Set {
			e.FieldStart("spokeId")
			s.SpokeId.Encode(e)
		}
	}
	{
		if s.Title.Set {
			e.FieldStart("title")
			s.Title.Encode(e)
		}
	}
	{
		if s.WorkEmail.Set {
			e.FieldStart("workEmail")
			s.WorkEmail.Encode(e)
		}
	}
	{
		if s.WorkLocation.Set {
			e.FieldStart("workLocation")
			s.WorkLocation.Encode(e)
		}
	}
}

var jsonFieldsNameOfEmployee = [16]string{
	0:  "customFields",
	1:  "department",
	2:  "employmentType",
	3:  "endDate",
	4:  "firstName",
	5:  "gender",
	6:  "id",
	7:  "identifiedGender",
	8:  "lastName",
	9:  "manager",
	10: "name",
	11: "roleState",
	12: "spokeId",
	13: "title",
	14: "workEmail",
	15: "workLocation",
}

// Decode decodes Employee from json.
func (s *Employee) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Employee to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "customFields":
			if err := func() error {
				s.CustomFields.Reset()
				if err := s.CustomFields.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customFields\"")
			}
		case "department":
			if err := func() error {
				s.Department.Reset()
				if err := s.Department.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"department\"")
			}
		case "employmentType":
			if err := func() error {
				s.EmploymentType.Reset()
				if err := s.EmploymentType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"employmentType\"")
			}
		case "endDate":
			if err := func() error {
				s.EndDate.Reset()
				if err := s.EndDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"endDate\"")
			}
		case "firstName":
			if err := func() error {
				s.FirstName.Reset()
				if err := s.FirstName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"firstName\"")
			}
		case "gender":
			if err := func() error {
				s.Gender.Reset()
				if err := s.Gender.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"gender\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "identifiedGender":
			if err := func() error {
				s.IdentifiedGender.Reset()
				if err := s.IdentifiedGender.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"identifiedGender\"")
			}
		case "lastName":
			if err := func() error {
				s.LastName.Reset()
				if err := s.LastName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"lastName\"")
			}
		case "manager":
			if err := func() error {
				s.Manager.Reset()
				if err := s.Manager.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"manager\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "roleState":
			if err := func() error {
				s.RoleState.Reset()
				if err := s.RoleState.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"roleState\"")
			}
		case "spokeId":
			if err := func() error {
				s.SpokeId.Reset()
				if err := s.SpokeId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"spokeId\"")
			}
		case "title":
			if err := func() error {
				s.Title.Reset()
				if err := s.Title.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"title\"")
			}
		case "workEmail":
			if err := func() error {
				s.WorkEmail.Reset()
				if err := s.WorkEmail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"workEmail\"")
			}
		case "workLocation":
			if err := func() error {
				s.WorkLocation.Reset()
				if err := s.WorkLocation.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"workLocation\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode Employee")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Employee) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Employee) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes EmployeeEmploymentType as json.
func (s EmployeeEmploymentType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes EmployeeEmploymentType from json.
func (s *EmployeeEmploymentType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode EmployeeEmploymentType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch EmployeeEmploymentType(v) {
	case EmployeeEmploymentTypeCONTRACTOR:
		*s = EmployeeEmploymentTypeCONTRACTOR
	case EmployeeEmploymentTypeSALARIEDFT:
		*s = EmployeeEmploymentTypeSALARIEDFT
	case EmployeeEmploymentTypeSALARIEDPT:
		*s = EmployeeEmploymentTypeSALARIEDPT
	case EmployeeEmploymentTypeHOURLYFT:
		*s = EmployeeEmploymentTypeHOURLYFT
	case EmployeeEmploymentTypeHOURLYPT:
		*s = EmployeeEmploymentTypeHOURLYPT
	case EmployeeEmploymentTypeTEMP:
		*s = EmployeeEmploymentTypeTEMP
	default:
		*s = EmployeeEmploymentType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s EmployeeEmploymentType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *EmployeeEmploymentType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes EmployeeGender as json.
func (s EmployeeGender) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes EmployeeGender from json.
func (s *EmployeeGender) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode EmployeeGender to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch EmployeeGender(v) {
	case EmployeeGenderMALE:
		*s = EmployeeGenderMALE
	case EmployeeGenderFEMALE:
		*s = EmployeeGenderFEMALE
	default:
		*s = EmployeeGender(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s EmployeeGender) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *EmployeeGender) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes EmployeeIdentifiedGender as json.
func (s EmployeeIdentifiedGender) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes EmployeeIdentifiedGender from json.
func (s *EmployeeIdentifiedGender) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode EmployeeIdentifiedGender to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch EmployeeIdentifiedGender(v) {
	case EmployeeIdentifiedGenderMALE:
		*s = EmployeeIdentifiedGenderMALE
	case EmployeeIdentifiedGenderFEMALE:
		*s = EmployeeIdentifiedGenderFEMALE
	case EmployeeIdentifiedGenderNONBINARY:
		*s = EmployeeIdentifiedGenderNONBINARY
	default:
		*s = EmployeeIdentifiedGender(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s EmployeeIdentifiedGender) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *EmployeeIdentifiedGender) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes EmployeeRoleState as json.
func (s EmployeeRoleState) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes EmployeeRoleState from json.
func (s *EmployeeRoleState) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode EmployeeRoleState to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch EmployeeRoleState(v) {
	case EmployeeRoleStateINIT:
		*s = EmployeeRoleStateINIT
	case EmployeeRoleStateHIRED:
		*s = EmployeeRoleStateHIRED
	case EmployeeRoleStateACCEPTED:
		*s = EmployeeRoleStateACCEPTED
	case EmployeeRoleStateACTIVE:
		*s = EmployeeRoleStateACTIVE
	case EmployeeRoleStateTERMINATED:
		*s = EmployeeRoleStateTERMINATED
	default:
		*s = EmployeeRoleState(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s EmployeeRoleState) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *EmployeeRoleState) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s Event) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s Event) encodeFields(e *jx.Encoder) {
	{
		if s.Company.Set {
			e.FieldStart("company")
			s.Company.Encode(e)
		}
	}
	{
		if s.EventReason.Set {
			e.FieldStart("event_reason")
			s.EventReason.Encode(e)
		}
	}
	{
		if s.EventType.Set {
			e.FieldStart("event_type")
			s.EventType.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Initiator.Set {
			e.FieldStart("initiator")
			s.Initiator.Encode(e)
		}
	}
	{
		if s.LinkedEvents != nil {
			e.FieldStart("linked_events")
			e.ArrStart()
			for _, elem := range s.LinkedEvents {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.RequestData.Set {
			e.FieldStart("request_data")
			s.RequestData.Encode(e)
		}
	}
	{
		if s.Spoke.Set {
			e.FieldStart("spoke")
			s.Spoke.Encode(e)
		}
	}
	{
		if s.Subjects != nil {
			e.FieldStart("subjects")
			e.ArrStart()
			for _, elem := range s.Subjects {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Timestamp.Set {
			e.FieldStart("timestamp")
			s.Timestamp.Encode(e)
		}
	}
}

var jsonFieldsNameOfEvent = [11]string{
	0:  "company",
	1:  "event_reason",
	2:  "event_type",
	3:  "id",
	4:  "initiator",
	5:  "linked_events",
	6:  "name",
	7:  "request_data",
	8:  "spoke",
	9:  "subjects",
	10: "timestamp",
}

// Decode decodes Event from json.
func (s *Event) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Event to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "company":
			if err := func() error {
				s.Company.Reset()
				if err := s.Company.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company\"")
			}
		case "event_reason":
			if err := func() error {
				s.EventReason.Reset()
				if err := s.EventReason.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"event_reason\"")
			}
		case "event_type":
			if err := func() error {
				s.EventType.Reset()
				if err := s.EventType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"event_type\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "initiator":
			if err := func() error {
				s.Initiator.Reset()
				if err := s.Initiator.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"initiator\"")
			}
		case "linked_events":
			if err := func() error {
				s.LinkedEvents = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.LinkedEvents = append(s.LinkedEvents, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"linked_events\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "request_data":
			if err := func() error {
				s.RequestData.Reset()
				if err := s.RequestData.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"request_data\"")
			}
		case "spoke":
			if err := func() error {
				s.Spoke.Reset()
				if err := s.Spoke.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"spoke\"")
			}
		case "subjects":
			if err := func() error {
				s.Subjects = make([]EventSubjectsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem EventSubjectsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Subjects = append(s.Subjects, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"subjects\"")
			}
		case "timestamp":
			if err := func() error {
				s.Timestamp.Reset()
				if err := s.Timestamp.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"timestamp\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode Event")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Event) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Event) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s EventEventReason) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s EventEventReason) encodeFields(e *jx.Encoder) {
	{
		if s.Message.Set {
			e.FieldStart("message")
			s.Message.Encode(e)
		}
	}
	{
		if s.Reason.Set {
			e.FieldStart("reason")
			s.Reason.Encode(e)
		}
	}
}

var jsonFieldsNameOfEventEventReason = [2]string{
	0: "message",
	1: "reason",
}

// Decode decodes EventEventReason from json.
func (s *EventEventReason) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode EventEventReason to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "message":
			if err := func() error {
				s.Message.Reset()
				if err := s.Message.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"message\"")
			}
		case "reason":
			if err := func() error {
				s.Reason.Reset()
				if err := s.Reason.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"reason\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode EventEventReason")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s EventEventReason) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *EventEventReason) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes EventEventType as json.
func (s EventEventType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes EventEventType from json.
func (s *EventEventType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode EventEventType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch EventEventType(v) {
	case EventEventTypeEXTERNALACCOUNTCREATE:
		*s = EventEventTypeEXTERNALACCOUNTCREATE
	case EventEventTypeEXTERNALACCOUNTINVITE:
		*s = EventEventTypeEXTERNALACCOUNTINVITE
	case EventEventTypeEXTERNALACCOUNTDELETE:
		*s = EventEventTypeEXTERNALACCOUNTDELETE
	case EventEventTypeEXTERNALACCOUNTSUSPEND:
		*s = EventEventTypeEXTERNALACCOUNTSUSPEND
	case EventEventTypeEXTERNALACCOUNTPASSWORDRESET:
		*s = EventEventTypeEXTERNALACCOUNTPASSWORDRESET
	case EventEventTypeEXTERNALGROUPADD:
		*s = EventEventTypeEXTERNALGROUPADD
	case EventEventTypeEXTERNALGROUPREMOVE:
		*s = EventEventTypeEXTERNALGROUPREMOVE
	case EventEventTypeEXTERNALSSOGRANT:
		*s = EventEventTypeEXTERNALSSOGRANT
	case EventEventTypeEXTERNALSSOREVOKE:
		*s = EventEventTypeEXTERNALSSOREVOKE
	case EventEventTypeEXTERNALSSOSIGNIN:
		*s = EventEventTypeEXTERNALSSOSIGNIN
	case EventEventTypeRPASSITEMSHARED:
		*s = EventEventTypeRPASSITEMSHARED
	case EventEventTypeRPASSITEMUNSHARED:
		*s = EventEventTypeRPASSITEMUNSHARED
	case EventEventTypeRPASSITEMUSED:
		*s = EventEventTypeRPASSITEMUSED
	case EventEventTypeUSERLOGINSUCCESS:
		*s = EventEventTypeUSERLOGINSUCCESS
	case EventEventTypeUSERLOGINFAILED:
		*s = EventEventTypeUSERLOGINFAILED
	case EventEventTypeACCOUNTPASSWORDRESET:
		*s = EventEventTypeACCOUNTPASSWORDRESET
	case EventEventTypeACCOUNTPASSWORDCHANGED:
		*s = EventEventTypeACCOUNTPASSWORDCHANGED
	case EventEventTypeTWOFACTORDEVICERESET:
		*s = EventEventTypeTWOFACTORDEVICERESET
	case EventEventTypeEXTERNALGROUPMEMBERREMOVE:
		*s = EventEventTypeEXTERNALGROUPMEMBERREMOVE
	default:
		*s = EventEventType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s EventEventType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *EventEventType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s EventInitiator) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s EventInitiator) encodeFields(e *jx.Encoder) {
	{
		if s.DisplayName.Set {
			e.FieldStart("display_name")
			s.DisplayName.Encode(e)
		}
	}
	{
		if s.Icon.Set {
			e.FieldStart("icon")
			s.Icon.Encode(e)
		}
	}
	{
		if s.Role.Set {
			e.FieldStart("role")
			s.Role.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
}

var jsonFieldsNameOfEventInitiator = [4]string{
	0: "display_name",
	1: "icon",
	2: "role",
	3: "type",
}

// Decode decodes EventInitiator from json.
func (s *EventInitiator) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode EventInitiator to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "display_name":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_name\"")
			}
		case "icon":
			if err := func() error {
				s.Icon.Reset()
				if err := s.Icon.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"icon\"")
			}
		case "role":
			if err := func() error {
				s.Role.Reset()
				if err := s.Role.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"role\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode EventInitiator")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s EventInitiator) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *EventInitiator) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes EventInitiatorType as json.
func (s EventInitiatorType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes EventInitiatorType from json.
func (s *EventInitiatorType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode EventInitiatorType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch EventInitiatorType(v) {
	case EventInitiatorTypeROLE:
		*s = EventInitiatorTypeROLE
	case EventInitiatorTypeSYSTEM:
		*s = EventInitiatorTypeSYSTEM
	case EventInitiatorTypeEXTERNAL:
		*s = EventInitiatorTypeEXTERNAL
	default:
		*s = EventInitiatorType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s EventInitiatorType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *EventInitiatorType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s EventRequestData) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s EventRequestData) encodeFields(e *jx.Encoder) {
	{
		if s.City.Set {
			e.FieldStart("city")
			s.City.Encode(e)
		}
	}
	{
		if s.Country.Set {
			e.FieldStart("country")
			s.Country.Encode(e)
		}
	}
	{
		if s.IP.Set {
			e.FieldStart("ip")
			s.IP.Encode(e)
		}
	}
	{
		if s.Latitude.Set {
			e.FieldStart("latitude")
			s.Latitude.Encode(e)
		}
	}
	{
		if s.Longitude.Set {
			e.FieldStart("longitude")
			s.Longitude.Encode(e)
		}
	}
}

var jsonFieldsNameOfEventRequestData = [5]string{
	0: "city",
	1: "country",
	2: "ip",
	3: "latitude",
	4: "longitude",
}

// Decode decodes EventRequestData from json.
func (s *EventRequestData) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode EventRequestData to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "city":
			if err := func() error {
				s.City.Reset()
				if err := s.City.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"city\"")
			}
		case "country":
			if err := func() error {
				s.Country.Reset()
				if err := s.Country.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"country\"")
			}
		case "ip":
			if err := func() error {
				s.IP.Reset()
				if err := s.IP.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ip\"")
			}
		case "latitude":
			if err := func() error {
				s.Latitude.Reset()
				if err := s.Latitude.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"latitude\"")
			}
		case "longitude":
			if err := func() error {
				s.Longitude.Reset()
				if err := s.Longitude.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"longitude\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode EventRequestData")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s EventRequestData) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *EventRequestData) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s EventSubjectsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s EventSubjectsItem) encodeFields(e *jx.Encoder) {
	{
		if s.DisplayName.Set {
			e.FieldStart("display_name")
			s.DisplayName.Encode(e)
		}
	}
	{
		if s.Icon.Set {
			e.FieldStart("icon")
			s.Icon.Encode(e)
		}
	}
	{
		if s.Instance.Set {
			e.FieldStart("instance")
			s.Instance.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
}

var jsonFieldsNameOfEventSubjectsItem = [4]string{
	0: "display_name",
	1: "icon",
	2: "instance",
	3: "type",
}

// Decode decodes EventSubjectsItem from json.
func (s *EventSubjectsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode EventSubjectsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "display_name":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"display_name\"")
			}
		case "icon":
			if err := func() error {
				s.Icon.Reset()
				if err := s.Icon.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"icon\"")
			}
		case "instance":
			if err := func() error {
				s.Instance.Reset()
				if err := s.Instance.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"instance\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode EventSubjectsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s EventSubjectsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *EventSubjectsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes EventSubjectsItemType as json.
func (s EventSubjectsItemType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes EventSubjectsItemType from json.
func (s *EventSubjectsItemType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode EventSubjectsItemType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch EventSubjectsItemType(v) {
	case EventSubjectsItemTypeROLE:
		*s = EventSubjectsItemTypeROLE
	case EventSubjectsItemTypeSPOKE:
		*s = EventSubjectsItemTypeSPOKE
	case EventSubjectsItemTypeRPASSITEM:
		*s = EventSubjectsItemTypeRPASSITEM
	case EventSubjectsItemTypeSPOKEUSER:
		*s = EventSubjectsItemTypeSPOKEUSER
	case EventSubjectsItemTypeGROUP:
		*s = EventSubjectsItemTypeGROUP
	default:
		*s = EventSubjectsItemType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s EventSubjectsItemType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *EventSubjectsItemType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s GetCompanyActivityOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s GetCompanyActivityOK) encodeFields(e *jx.Encoder) {
	{
		if s.Data.Set {
			e.FieldStart("data")
			s.Data.Encode(e)
		}
	}
	{
		if s.Error.Set {
			e.FieldStart("error")
			s.Error.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetCompanyActivityOK = [2]string{
	0: "data",
	1: "error",
}

// Decode decodes GetCompanyActivityOK from json.
func (s *GetCompanyActivityOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetCompanyActivityOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "data":
			if err := func() error {
				s.Data.Reset()
				if err := s.Data.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"data\"")
			}
		case "error":
			if err := func() error {
				s.Error.Reset()
				if err := s.Error.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetCompanyActivityOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s GetCompanyActivityOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetCompanyActivityOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s GetCompanyActivityOKData) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s GetCompanyActivityOKData) encodeFields(e *jx.Encoder) {
	{
		if s.Events.Set {
			e.FieldStart("events")
			s.Events.Encode(e)
		}
	}
	{
		if s.Next.Set {
			e.FieldStart("next")
			s.Next.Encode(e)
		}
	}
}

var jsonFieldsNameOfGetCompanyActivityOKData = [2]string{
	0: "events",
	1: "next",
}

// Decode decodes GetCompanyActivityOKData from json.
func (s *GetCompanyActivityOKData) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetCompanyActivityOKData to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "events":
			if err := func() error {
				s.Events.Reset()
				if err := s.Events.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"events\"")
			}
		case "next":
			if err := func() error {
				s.Next.Reset()
				if err := s.Next.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"next\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GetCompanyActivityOKData")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s GetCompanyActivityOKData) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetCompanyActivityOKData) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s Group) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s Group) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.SpokeId.Set {
			e.FieldStart("spokeId")
			s.SpokeId.Encode(e)
		}
	}
	{
		if s.Users != nil {
			e.FieldStart("users")
			e.ArrStart()
			for _, elem := range s.Users {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Version.Set {
			e.FieldStart("version")
			s.Version.Encode(e)
		}
	}
}

var jsonFieldsNameOfGroup = [5]string{
	0: "id",
	1: "name",
	2: "spokeId",
	3: "users",
	4: "version",
}

// Decode decodes Group from json.
func (s *Group) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Group to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "spokeId":
			if err := func() error {
				s.SpokeId.Reset()
				if err := s.SpokeId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"spokeId\"")
			}
		case "users":
			if err := func() error {
				s.Users = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.Users = append(s.Users, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"users\"")
			}
		case "version":
			if err := func() error {
				s.Version.Reset()
				if err := s.Version.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"version\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode Group")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Group) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Group) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s GroupUpdatePayload) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s GroupUpdatePayload) encodeFields(e *jx.Encoder) {
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.SpokeId.Set {
			e.FieldStart("spokeId")
			s.SpokeId.Encode(e)
		}
	}
	{
		if s.Users != nil {
			e.FieldStart("users")
			e.ArrStart()
			for _, elem := range s.Users {
				if len(elem) != 0 {
					e.Raw(elem)
				}
			}
			e.ArrEnd()
		}
	}
	{
		if s.Version.Set {
			e.FieldStart("version")
			s.Version.Encode(e)
		}
	}
}

var jsonFieldsNameOfGroupUpdatePayload = [4]string{
	0: "name",
	1: "spokeId",
	2: "users",
	3: "version",
}

// Decode decodes GroupUpdatePayload from json.
func (s *GroupUpdatePayload) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GroupUpdatePayload to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "spokeId":
			if err := func() error {
				s.SpokeId.Reset()
				if err := s.SpokeId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"spokeId\"")
			}
		case "users":
			if err := func() error {
				s.Users = make([]jx.Raw, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem jx.Raw
					v, err := d.RawAppend(nil)
					elem = jx.Raw(v)
					if err != nil {
						return err
					}
					s.Users = append(s.Users, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"users\"")
			}
		case "version":
			if err := func() error {
				s.Version.Reset()
				if err := s.Version.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"version\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GroupUpdatePayload")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s GroupUpdatePayload) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GroupUpdatePayload) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s LeaveRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s LeaveRequest) encodeFields(e *jx.Encoder) {
	{
		if s.Comments.Set {
			e.FieldStart("comments")
			s.Comments.Encode(e)
		}
	}
	{
		if s.CreatedAt.Set {
			e.FieldStart("createdAt")
			s.CreatedAt.Encode(e)
		}
	}
	{
		if s.Dates != nil {
			e.FieldStart("dates")
			e.ArrStart()
			for _, elem := range s.Dates {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.EndDate.Set {
			e.FieldStart("endDate")
			s.EndDate.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.LeavePolicy.Set {
			e.FieldStart("leavePolicy")
			s.LeavePolicy.Encode(e)
		}
	}
	{
		if s.LeaveType.Set {
			e.FieldStart("leaveType")
			s.LeaveType.Encode(e)
		}
	}
	{
		if s.NumHours.Set {
			e.FieldStart("numHours")
			s.NumHours.Encode(e)
		}
	}
	{
		if s.NumMinutes.Set {
			e.FieldStart("numMinutes")
			s.NumMinutes.Encode(e)
		}
	}
	{
		if s.PolicyDisplayName.Set {
			e.FieldStart("policyDisplayName")
			s.PolicyDisplayName.Encode(e)
		}
	}
	{
		if s.ProcessedAt.Set {
			e.FieldStart("processedAt")
			s.ProcessedAt.Encode(e)
		}
	}
	{
		if s.ProcessedBy.Set {
			e.FieldStart("processedBy")
			s.ProcessedBy.Encode(e)
		}
	}
	{
		if s.ProcessedByName.Set {
			e.FieldStart("processedByName")
			s.ProcessedByName.Encode(e)
		}
	}
	{
		if s.ReasonForLeave.Set {
			e.FieldStart("reasonForLeave")
			s.ReasonForLeave.Encode(e)
		}
	}
	{
		if s.RequestedBy.Set {
			e.FieldStart("requestedBy")
			s.RequestedBy.Encode(e)
		}
	}
	{
		if s.RequestedByName.Set {
			e.FieldStart("requestedByName")
			s.RequestedByName.Encode(e)
		}
	}
	{
		if s.Role.Set {
			e.FieldStart("role")
			s.Role.Encode(e)
		}
	}
	{
		if s.RoleName.Set {
			e.FieldStart("roleName")
			s.RoleName.Encode(e)
		}
	}
	{
		if s.StartDate.Set {
			e.FieldStart("startDate")
			s.StartDate.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.UpdatedAt.Set {
			e.FieldStart("updatedAt")
			s.UpdatedAt.Encode(e)
		}
	}
}

var jsonFieldsNameOfLeaveRequest = [21]string{
	0:  "comments",
	1:  "createdAt",
	2:  "dates",
	3:  "endDate",
	4:  "id",
	5:  "leavePolicy",
	6:  "leaveType",
	7:  "numHours",
	8:  "numMinutes",
	9:  "policyDisplayName",
	10: "processedAt",
	11: "processedBy",
	12: "processedByName",
	13: "reasonForLeave",
	14: "requestedBy",
	15: "requestedByName",
	16: "role",
	17: "roleName",
	18: "startDate",
	19: "status",
	20: "updatedAt",
}

// Decode decodes LeaveRequest from json.
func (s *LeaveRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode LeaveRequest to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "comments":
			if err := func() error {
				s.Comments.Reset()
				if err := s.Comments.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"comments\"")
			}
		case "createdAt":
			if err := func() error {
				s.CreatedAt.Reset()
				if err := s.CreatedAt.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"createdAt\"")
			}
		case "dates":
			if err := func() error {
				s.Dates = make([]LeaveRequestDatesItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem LeaveRequestDatesItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Dates = append(s.Dates, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"dates\"")
			}
		case "endDate":
			if err := func() error {
				s.EndDate.Reset()
				if err := s.EndDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"endDate\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "leavePolicy":
			if err := func() error {
				s.LeavePolicy.Reset()
				if err := s.LeavePolicy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"leavePolicy\"")
			}
		case "leaveType":
			if err := func() error {
				s.LeaveType.Reset()
				if err := s.LeaveType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"leaveType\"")
			}
		case "numHours":
			if err := func() error {
				s.NumHours.Reset()
				if err := s.NumHours.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"numHours\"")
			}
		case "numMinutes":
			if err := func() error {
				s.NumMinutes.Reset()
				if err := s.NumMinutes.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"numMinutes\"")
			}
		case "policyDisplayName":
			if err := func() error {
				s.PolicyDisplayName.Reset()
				if err := s.PolicyDisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"policyDisplayName\"")
			}
		case "processedAt":
			if err := func() error {
				s.ProcessedAt.Reset()
				if err := s.ProcessedAt.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"processedAt\"")
			}
		case "processedBy":
			if err := func() error {
				s.ProcessedBy.Reset()
				if err := s.ProcessedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"processedBy\"")
			}
		case "processedByName":
			if err := func() error {
				s.ProcessedByName.Reset()
				if err := s.ProcessedByName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"processedByName\"")
			}
		case "reasonForLeave":
			if err := func() error {
				s.ReasonForLeave.Reset()
				if err := s.ReasonForLeave.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"reasonForLeave\"")
			}
		case "requestedBy":
			if err := func() error {
				s.RequestedBy.Reset()
				if err := s.RequestedBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"requestedBy\"")
			}
		case "requestedByName":
			if err := func() error {
				s.RequestedByName.Reset()
				if err := s.RequestedByName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"requestedByName\"")
			}
		case "role":
			if err := func() error {
				s.Role.Reset()
				if err := s.Role.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"role\"")
			}
		case "roleName":
			if err := func() error {
				s.RoleName.Reset()
				if err := s.RoleName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"roleName\"")
			}
		case "startDate":
			if err := func() error {
				s.StartDate.Reset()
				if err := s.StartDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"startDate\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "updatedAt":
			if err := func() error {
				s.UpdatedAt.Reset()
				if err := s.UpdatedAt.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updatedAt\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode LeaveRequest")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s LeaveRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *LeaveRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s LeaveRequestDatesItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s LeaveRequestDatesItem) encodeFields(e *jx.Encoder) {
	{
		if s.Date.Set {
			e.FieldStart("date")
			s.Date.Encode(e, json.EncodeDate)
		}
	}
	{
		if s.NumMinutes.Set {
			e.FieldStart("numMinutes")
			s.NumMinutes.Encode(e)
		}
	}
}

var jsonFieldsNameOfLeaveRequestDatesItem = [2]string{
	0: "date",
	1: "numMinutes",
}

// Decode decodes LeaveRequestDatesItem from json.
func (s *LeaveRequestDatesItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode LeaveRequestDatesItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "date":
			if err := func() error {
				s.Date.Reset()
				if err := s.Date.Decode(d, json.DecodeDate); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"date\"")
			}
		case "numMinutes":
			if err := func() error {
				s.NumMinutes.Reset()
				if err := s.NumMinutes.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"numMinutes\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode LeaveRequestDatesItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s LeaveRequestDatesItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *LeaveRequestDatesItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes LeaveRequestLeaveType as json.
func (s LeaveRequestLeaveType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes LeaveRequestLeaveType from json.
func (s *LeaveRequestLeaveType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode LeaveRequestLeaveType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch LeaveRequestLeaveType(v) {
	case LeaveRequestLeaveTypeVACATION:
		*s = LeaveRequestLeaveTypeVACATION
	case LeaveRequestLeaveTypeSICK:
		*s = LeaveRequestLeaveTypeSICK
	case LeaveRequestLeaveTypeJURYDUTY:
		*s = LeaveRequestLeaveTypeJURYDUTY
	default:
		*s = LeaveRequestLeaveType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s LeaveRequestLeaveType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *LeaveRequestLeaveType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes LeaveRequestStatus as json.
func (s LeaveRequestStatus) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes LeaveRequestStatus from json.
func (s *LeaveRequestStatus) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode LeaveRequestStatus to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch LeaveRequestStatus(v) {
	case LeaveRequestStatusPENDING:
		*s = LeaveRequestStatusPENDING
	case LeaveRequestStatusAPPROVED:
		*s = LeaveRequestStatusAPPROVED
	case LeaveRequestStatusREJECTED:
		*s = LeaveRequestStatusREJECTED
	case LeaveRequestStatusCANCELED:
		*s = LeaveRequestStatusCANCELED
	default:
		*s = LeaveRequestStatus(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s LeaveRequestStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *LeaveRequestStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s Level) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s Level) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Parent.Set {
			e.FieldStart("parent")
			s.Parent.Encode(e)
		}
	}
}

var jsonFieldsNameOfLevel = [3]string{
	0: "id",
	1: "name",
	2: "parent",
}

// Decode decodes Level from json.
func (s *Level) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Level to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "parent":
			if err := func() error {
				s.Parent.Reset()
				if err := s.Parent.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"parent\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode Level")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Level) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Level) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes bool as json.
func (o OptBool) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Bool(bool(o.Value))
}

// Decode decodes bool from json.
func (o *OptBool) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptBool to nil")
	}
	o.Set = true
	v, err := d.Bool()
	if err != nil {
		return err
	}
	o.Value = bool(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptBool) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptBool) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Candidate as json.
func (o OptCandidate) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes Candidate from json.
func (o *OptCandidate) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCandidate to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCandidate) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCandidate) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CandidateEmploymentType as json.
func (o OptCandidateEmploymentType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CandidateEmploymentType from json.
func (o *OptCandidateEmploymentType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCandidateEmploymentType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCandidateEmploymentType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCandidateEmploymentType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CandidateSalaryUnit as json.
func (o OptCandidateSalaryUnit) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CandidateSalaryUnit from json.
func (o *OptCandidateSalaryUnit) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCandidateSalaryUnit to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCandidateSalaryUnit) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCandidateSalaryUnit) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomFields as json.
func (o OptCustomFields) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes CustomFields from json.
func (o *OptCustomFields) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCustomFields to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCustomFields) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCustomFields) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomFieldsType as json.
func (o OptCustomFieldsType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CustomFieldsType from json.
func (o *OptCustomFieldsType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCustomFieldsType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCustomFieldsType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCustomFieldsType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes time.Time as json.
func (o OptDate) Encode(e *jx.Encoder, format func(*jx.Encoder, time.Time)) {
	if !o.Set {
		return
	}
	format(e, o.Value)
}

// Decode decodes time.Time from json.
func (o *OptDate) Decode(d *jx.Decoder, format func(*jx.Decoder) (time.Time, error)) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptDate to nil")
	}
	o.Set = true
	v, err := format(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptDate) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e, json.EncodeDate)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptDate) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d, json.DecodeDate)
}

// Encode encodes EmployeeEmploymentType as json.
func (o OptEmployeeEmploymentType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes EmployeeEmploymentType from json.
func (o *OptEmployeeEmploymentType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptEmployeeEmploymentType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptEmployeeEmploymentType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptEmployeeEmploymentType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes EmployeeRoleState as json.
func (o OptEmployeeRoleState) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes EmployeeRoleState from json.
func (o *OptEmployeeRoleState) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptEmployeeRoleState to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptEmployeeRoleState) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptEmployeeRoleState) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes EventEventType as json.
func (o OptEventEventType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes EventEventType from json.
func (o *OptEventEventType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptEventEventType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptEventEventType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptEventEventType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes EventInitiatorType as json.
func (o OptEventInitiatorType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes EventInitiatorType from json.
func (o *OptEventInitiatorType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptEventInitiatorType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptEventInitiatorType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptEventInitiatorType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes EventSubjectsItemType as json.
func (o OptEventSubjectsItemType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes EventSubjectsItemType from json.
func (o *OptEventSubjectsItemType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptEventSubjectsItemType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptEventSubjectsItemType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptEventSubjectsItemType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes float64 as json.
func (o OptFloat64) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Float64(float64(o.Value))
}

// Decode decodes float64 from json.
func (o *OptFloat64) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptFloat64 to nil")
	}
	o.Set = true
	v, err := d.Float64()
	if err != nil {
		return err
	}
	o.Value = float64(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptFloat64) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptFloat64) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GroupUpdatePayload as json.
func (o OptGroupUpdatePayload) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GroupUpdatePayload from json.
func (o *OptGroupUpdatePayload) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGroupUpdatePayload to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGroupUpdatePayload) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGroupUpdatePayload) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes int as json.
func (o OptInt) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Int(int(o.Value))
}

// Decode decodes int from json.
func (o *OptInt) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptInt to nil")
	}
	o.Set = true
	v, err := d.Int()
	if err != nil {
		return err
	}
	o.Value = int(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptInt) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptInt) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes LeaveRequestLeaveType as json.
func (o OptLeaveRequestLeaveType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes LeaveRequestLeaveType from json.
func (o *OptLeaveRequestLeaveType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptLeaveRequestLeaveType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptLeaveRequestLeaveType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptLeaveRequestLeaveType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes LeaveRequestStatus as json.
func (o OptLeaveRequestStatus) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes LeaveRequestStatus from json.
func (o *OptLeaveRequestStatus) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptLeaveRequestStatus to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptLeaveRequestStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptLeaveRequestStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Address as json.
func (o OptNilAddress) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes Address from json.
func (o *OptNilAddress) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilAddress to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v Address
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilAddress) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilAddress) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes EmployeeGender as json.
func (o OptNilEmployeeGender) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes EmployeeGender from json.
func (o *OptNilEmployeeGender) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilEmployeeGender to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v EmployeeGender
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilEmployeeGender) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilEmployeeGender) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes EmployeeIdentifiedGender as json.
func (o OptNilEmployeeIdentifiedGender) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes EmployeeIdentifiedGender from json.
func (o *OptNilEmployeeIdentifiedGender) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilEmployeeIdentifiedGender to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v EmployeeIdentifiedGender
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilEmployeeIdentifiedGender) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilEmployeeIdentifiedGender) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes []Event as json.
func (o OptNilEventArray) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.ArrStart()
	for _, elem := range o.Value {
		elem.Encode(e)
	}
	e.ArrEnd()
}

// Decode decodes []Event from json.
func (o *OptNilEventArray) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilEventArray to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v []Event
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	o.Value = make([]Event, 0)
	if err := d.Arr(func(d *jx.Decoder) error {
		var elem Event
		if err := elem.Decode(d); err != nil {
			return err
		}
		o.Value = append(o.Value, elem)
		return nil
	}); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilEventArray) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilEventArray) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes EventEventReason as json.
func (o OptNilEventEventReason) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes EventEventReason from json.
func (o *OptNilEventEventReason) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilEventEventReason to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v EventEventReason
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilEventEventReason) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilEventEventReason) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes EventInitiator as json.
func (o OptNilEventInitiator) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes EventInitiator from json.
func (o *OptNilEventInitiator) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilEventInitiator to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v EventInitiator
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilEventInitiator) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilEventInitiator) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes EventRequestData as json.
func (o OptNilEventRequestData) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes EventRequestData from json.
func (o *OptNilEventRequestData) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilEventRequestData to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v EventRequestData
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilEventRequestData) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilEventRequestData) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetCompanyActivityOKData as json.
func (o OptNilGetCompanyActivityOKData) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes GetCompanyActivityOKData from json.
func (o *OptNilGetCompanyActivityOKData) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilGetCompanyActivityOKData to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v GetCompanyActivityOKData
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilGetCompanyActivityOKData) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilGetCompanyActivityOKData) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes int as json.
func (o OptNilInt) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Int(int(o.Value))
}

// Decode decodes int from json.
func (o *OptNilInt) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilInt to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v int
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	v, err := d.Int()
	if err != nil {
		return err
	}
	o.Value = int(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilInt) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilInt) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes string as json.
func (o OptNilString) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes string from json.
func (o *OptNilString) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilString to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v string
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	v, err := d.Str()
	if err != nil {
		return err
	}
	o.Value = string(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilString) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilString) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PostGroupsReq as json.
func (o OptPostGroupsReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PostGroupsReq from json.
func (o *OptPostGroupsReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPostGroupsReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPostGroupsReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPostGroupsReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes string as json.
func (o OptString) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes string from json.
func (o *OptString) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptString to nil")
	}
	o.Set = true
	v, err := d.Str()
	if err != nil {
		return err
	}
	o.Value = string(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptString) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptString) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s PostGroupsReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s PostGroupsReq) encodeFields(e *jx.Encoder) {
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.SpokeId.Set {
			e.FieldStart("spokeId")
			s.SpokeId.Encode(e)
		}
	}
	{
		if s.Users != nil {
			e.FieldStart("users")
			e.ArrStart()
			for _, elem := range s.Users {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfPostGroupsReq = [3]string{
	0: "name",
	1: "spokeId",
	2: "users",
}

// Decode decodes PostGroupsReq from json.
func (s *PostGroupsReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PostGroupsReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "spokeId":
			if err := func() error {
				s.SpokeId.Reset()
				if err := s.SpokeId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"spokeId\"")
			}
		case "users":
			if err := func() error {
				s.Users = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.Users = append(s.Users, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"users\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PostGroupsReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PostGroupsReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PostGroupsReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s PostMarkAppInstalledOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s PostMarkAppInstalledOK) encodeFields(e *jx.Encoder) {
	{

		e.FieldStart("ok")
		e.Bool(s.Ok)
	}
}

var jsonFieldsNameOfPostMarkAppInstalledOK = [1]string{
	0: "ok",
}

// Decode decodes PostMarkAppInstalledOK from json.
func (s *PostMarkAppInstalledOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PostMarkAppInstalledOK to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "ok":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Bool()
				s.Ok = bool(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ok\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PostMarkAppInstalledOK")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfPostMarkAppInstalledOK) {
					name = jsonFieldsNameOfPostMarkAppInstalledOK[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PostMarkAppInstalledOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PostMarkAppInstalledOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s Team) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s Team) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Parent.Set {
			e.FieldStart("parent")
			s.Parent.Encode(e)
		}
	}
}

var jsonFieldsNameOfTeam = [3]string{
	0: "id",
	1: "name",
	2: "parent",
}

// Decode decodes Team from json.
func (s *Team) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Team to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "parent":
			if err := func() error {
				s.Parent.Reset()
				if err := s.Parent.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"parent\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode Team")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Team) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Team) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s WorkLocation) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s WorkLocation) encodeFields(e *jx.Encoder) {
	{
		if s.Address.Set {
			e.FieldStart("address")
			s.Address.Encode(e)
		}
	}
	{
		if s.Nickname.Set {
			e.FieldStart("nickname")
			s.Nickname.Encode(e)
		}
	}
}

var jsonFieldsNameOfWorkLocation = [2]string{
	0: "address",
	1: "nickname",
}

// Decode decodes WorkLocation from json.
func (s *WorkLocation) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WorkLocation to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "address":
			if err := func() error {
				s.Address.Reset()
				if err := s.Address.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"address\"")
			}
		case "nickname":
			if err := func() error {
				s.Nickname.Reset()
				if err := s.Nickname.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"nickname\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode WorkLocation")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s WorkLocation) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WorkLocation) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}
