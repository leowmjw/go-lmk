// Code generated by ogen, DO NOT EDIT.

package rippling

import (
	"context"

	ht "github.com/ogen-go/ogen/http"
)

var _ Handler = UnimplementedHandler{}

// UnimplementedHandler is no-op Handler which returns http.ErrNotImplemented.
type UnimplementedHandler struct{}

// CustomFieldsGet implements  operation.
//
// Returns the custom fields for the given company.
//
// GET /custom_fields
func (UnimplementedHandler) CustomFieldsGet(ctx context.Context, params CustomFieldsGetParams) (r []CustomFields, _ error) {
	return r, ht.ErrNotImplemented
}

// DeleteGroupsGroupId implements delete-groups-groupId operation.
//
// Please note, the Groups endpoint requires an OAuth application (i.e. approved 3rd party partners),
// as the end point is intended for mapping third-party application “Groups” within Rippling
// organizations.
// Deletes the specified group.
//
// DELETE /groups/{groupId}
func (UnimplementedHandler) DeleteGroupsGroupId(ctx context.Context, params DeleteGroupsGroupIdParams) (r DeleteGroupsGroupIdOK, _ error) {
	return r, ht.ErrNotImplemented
}

// GetCompanies implements get-companies operation.
//
// Returns the currently accessible company for the given token. Please note, the returned fields
// depend on the scopes that are enabled for your access token or API key.
//
// GET /companies/current
func (UnimplementedHandler) GetCompanies(ctx context.Context) (r Company, _ error) {
	return r, ht.ErrNotImplemented
}

// GetCompanyActivity implements get-company_activity operation.
//
// Retrieves the activity for a given company.
// The most reliable method to ingest all activity from Rippling is to use a pagination cursor via
// the 'next' parameter. This will ensure that events are not skipped or duplicated due to the lack
// of timestamp precision.
// The most reliable method to ingest all activity from Rippling is to use a pagination cursor via
// the next parameter. This will ensure that events are not skipped or duplicated due to the lack of
// timestamp precision.
// The general sequence of steps to leverage the next parameter:
// 1. Issue an initial request using startDate with a value set to some date in the last 90 days
// 2. Retrieve the next page of events through the next value from the response data.
// 3. Issue the paginated request
// 4. Retrieve the next page of events through the next value from the response data
// 5. Pause and repeat the previous step.
//
// GET /company_activity
func (UnimplementedHandler) GetCompanyActivity(ctx context.Context, params GetCompanyActivityParams) (r GetCompanyActivityOK, _ error) {
	return r, ht.ErrNotImplemented
}

// GetDepartments implements get-departments operation.
//
// Returns a list of departments for the specified company.
//
// GET /departments
func (UnimplementedHandler) GetDepartments(ctx context.Context, params GetDepartmentsParams) (r []Department, _ error) {
	return r, ht.ErrNotImplemented
}

// GetEmployees implements get-employees operation.
//
// Retrieves the list of active employees. The fields retrieved depend on the employee scopes that
// you have access to for your access token or API key. The only guarenteeed fields include id,
// personalEmail, and roleState.
//
// GET /employees
func (UnimplementedHandler) GetEmployees(ctx context.Context, params GetEmployeesParams) (r []Employee, _ error) {
	return r, ht.ErrNotImplemented
}

// GetEmployeesEmployeeId implements get-employees-employeeId operation.
//
// Retrieves the information for a single employee based on the scopes that your API key or access
// token have access to.
//
// GET /employees/{employeeId}
func (UnimplementedHandler) GetEmployeesEmployeeId(ctx context.Context, params GetEmployeesEmployeeIdParams) (r Employee, _ error) {
	return r, ht.ErrNotImplemented
}

// GetEmployeesIncludeTerminated implements get-employees-include_terminated operation.
//
// Similar to the active employees endpoint, but this endpoint includes both active and terminated
// employees.
//
// GET /employees/include_terminated
func (UnimplementedHandler) GetEmployeesIncludeTerminated(ctx context.Context, params GetEmployeesIncludeTerminatedParams) (r []Employee, _ error) {
	return r, ht.ErrNotImplemented
}

// GetGroups implements get-groups operation.
//
// Please note, the Groups endpoint requires an OAuth application (i.e. approved 3rd party partners),
// as the end point is intended for mapping third-party application “Groups” within Rippling
// organizations.
// Lists the current third-party groups for an organization.
//
// GET /groups
func (UnimplementedHandler) GetGroups(ctx context.Context) (r []Group, _ error) {
	return r, ht.ErrNotImplemented
}

// GetLeaveRequests implements get-leave_requests operation.
//
// Retrieves the current leave requests.The query can be filtered by a number of specific query
// parameters.
//
// GET /leave_requests
func (UnimplementedHandler) GetLeaveRequests(ctx context.Context, params GetLeaveRequestsParams) (r []LeaveRequest, _ error) {
	return r, ht.ErrNotImplemented
}

// GetLevels implements get-levels operation.
//
// Retrieves the levels for the company. Levels are set positions for an organization, such as
// Manager, or Executive.
//
// GET /levels
func (UnimplementedHandler) GetLevels(ctx context.Context, params GetLevelsParams) (r []Level, _ error) {
	return r, ht.ErrNotImplemented
}

// GetMe implements get-me operation.
//
// Retrieves basic information about the Rippling user whose access token you're using. This is
// generally used for the SSO flow.
//
// GET /me
func (UnimplementedHandler) GetMe(ctx context.Context) (r AuthenticatedUserMe, _ error) {
	return r, ht.ErrNotImplemented
}

// GetTeams implements get-teams operation.
//
// Retrieves the list of teams for the company.
//
// GET /teams
func (UnimplementedHandler) GetTeams(ctx context.Context, params GetTeamsParams) (r []Team, _ error) {
	return r, ht.ErrNotImplemented
}

// GetWorkLocations implements get-work_locations operation.
//
// Returns the list of work locations for a given company.
//
// GET /work_locations
func (UnimplementedHandler) GetWorkLocations(ctx context.Context, params GetWorkLocationsParams) (r []WorkLocation, _ error) {
	return r, ht.ErrNotImplemented
}

// PatchGroupsGroupId implements patch-groups-groupId operation.
//
// Please note, the Groups endpoint requires an OAuth application (i.e. approved 3rd party partners),
// as the end point is intended for mapping third-party application “Groups” within Rippling
// organizations.
// Using the PUT method, all of the group fields will be updated, even if the corresponding parameter
// is missing. If the PATCH method is used, and a param is missing, its value won’t be changed.
//
// PATCH /groups/{groupId}
func (UnimplementedHandler) PatchGroupsGroupId(ctx context.Context, req OptGroupUpdatePayload, params PatchGroupsGroupIdParams) (r Group, _ error) {
	return r, ht.ErrNotImplemented
}

// PostAtsCandidatesPushCandidate implements post-ats_candidates-push_candidate operation.
//
// Pushes a candidate from an applicant tracking system directly into the Rippling onboarding flow.
// Please note, this endpoint is only available to applications integrating with OAuth2.0.
//
// POST /ats_candidates/push_candidate
func (UnimplementedHandler) PostAtsCandidatesPushCandidate(ctx context.Context, req OptCandidate) (r Candidate, _ error) {
	return r, ht.ErrNotImplemented
}

// PostGroups implements post-groups operation.
//
// Creates a generic group, that can be associated within the third-party application.
//
// POST /groups
func (UnimplementedHandler) PostGroups(ctx context.Context, req OptPostGroupsReq) (r Group, _ error) {
	return r, ht.ErrNotImplemented
}

// PostMarkAppInstalled implements post-mark_app_installed operation.
//
// This endpoint can be hit with an access token in order to mark you app as installed, if you aren't
// hitting Rippling's other endpoints on installation. The endpoint does not require any scopes.
// Please note, hitting any other endpoint should mark your app as installed as well.
//
// POST /mark_app_installed
func (UnimplementedHandler) PostMarkAppInstalled(ctx context.Context) (r PostMarkAppInstalledOK, _ error) {
	return r, ht.ErrNotImplemented
}

// ProcessLeaveRequests implements process-leave_requests operation.
//
// Approve or decline a leave request. Only pending requests can be processed (approved / declined).
//
// POST /leave_requests/{id}/process
func (UnimplementedHandler) ProcessLeaveRequests(ctx context.Context, params ProcessLeaveRequestsParams) (r LeaveRequest, _ error) {
	return r, ht.ErrNotImplemented
}

// PutGroupsGroupId implements put-groups-groupId operation.
//
// Please note, the Groups endpoint requires an OAuth application (i.e. approved 3rd party partners),
// as the end point is intended for mapping third-party application “Groups” within Rippling
// organizations.
// Using the PUT method, all of the group fields will be updated, even if the corresponding parameter
// is missing. If the PATCH method is used, and a param is missing, its value won’t be changed.
//
// PUT /groups/{groupId}
func (UnimplementedHandler) PutGroupsGroupId(ctx context.Context, req OptGroupUpdatePayload, params PutGroupsGroupIdParams) (r Group, _ error) {
	return r, ht.ErrNotImplemented
}
