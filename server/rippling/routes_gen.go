// This file is generated by github.com/mikekonan/go-oas3. DO NOT EDIT.

package rippling

import (
	"context"
	"encoding/json"
	"encoding/xml"
	"errors"
	"fmt"
	chi "github.com/go-chi/chi"
	cast "github.com/spf13/cast"
	"net/http"
)

type Hooks struct {
	RequestSecurityParseFailed    func(*http.Request, string, RequestProcessingResult)
	RequestSecurityParseCompleted func(*http.Request, string)
	RequestSecurityCheckFailed    func(*http.Request, string, string, RequestProcessingResult)
	RequestSecurityCheckCompleted func(*http.Request, string, string)
	RequestBodyUnmarshalFailed    func(*http.Request, string, RequestProcessingResult)
	RequestHeaderParseFailed      func(*http.Request, string, string, RequestProcessingResult)
	RequestPathParseFailed        func(*http.Request, string, string, RequestProcessingResult)
	RequestQueryParseFailed       func(*http.Request, string, string, RequestProcessingResult)
	RequestBodyValidationFailed   func(*http.Request, string, RequestProcessingResult)
	RequestHeaderValidationFailed func(*http.Request, string, RequestProcessingResult)
	RequestPathValidationFailed   func(*http.Request, string, RequestProcessingResult)
	RequestQueryValidationFailed  func(*http.Request, string, RequestProcessingResult)
	RequestBodyUnmarshalCompleted func(*http.Request, string)
	RequestHeaderParseCompleted   func(*http.Request, string)
	RequestPathParseCompleted     func(*http.Request, string)
	RequestQueryParseCompleted    func(*http.Request, string)
	RequestParseCompleted         func(*http.Request, string)
	RequestProcessingCompleted    func(*http.Request, string)
	RequestRedirectStarted        func(*http.Request, string, string)
	ResponseBodyMarshalCompleted  func(*http.Request, string)
	ResponseBodyWriteCompleted    func(*http.Request, string, int)
	ResponseBodyMarshalFailed     func(http.ResponseWriter, *http.Request, string, error)
	ResponseBodyWriteFailed       func(*http.Request, string, int, error)
	ServiceCompleted              func(*http.Request, string)
}

type requestProcessingResultType uint8

const (
	BodyUnmarshalFailed requestProcessingResultType = iota + 1
	BodyValidationFailed
	HeaderParseFailed
	HeaderValidationFailed
	QueryParseFailed
	QueryValidationFailed
	PathParseFailed
	PathValidationFailed
	SecurityParseFailed
	SecurityCheckFailed
	ParseSucceed
)

type RequestProcessingResult struct {
	error error
	typee requestProcessingResultType
}

func NewRequestProcessingResult(t requestProcessingResultType, err error) RequestProcessingResult {
	return RequestProcessingResult{
		error: err,
		typee: t,
	}
}

func (r RequestProcessingResult) Type() requestProcessingResultType {
	return r.typee
}

func (r RequestProcessingResult) Err() error {
	return r.error
}

func PetsHandler(impl PetsService, r chi.Router, hooks *Hooks) http.Handler {
	router := &petsRouter{router: r, service: impl, hooks: hooks}

	router.mount()

	return router.router
}

type petsRouter struct {
	router  chi.Router
	service PetsService
	hooks   *Hooks
}

func (router *petsRouter) mount() {
	router.router.Get("/pets/{petId}", router.GetPetsPetID)
	router.router.Get("/pets", router.GetPets)
	router.router.Post("/pets", router.PostPets)
}

func (router *petsRouter) parseGetPetsPetIDRequest(r *http.Request) (request GetPetsPetIDRequest) {
	request.ProcessingResult = RequestProcessingResult{typee: ParseSucceed}

	pathPetID := chi.URLParam(r, "petId")
	if pathPetID == "" {
		err := fmt.Errorf("petId is empty")

		request.ProcessingResult = RequestProcessingResult{error: err, typee: PathParseFailed}
		if router.hooks.RequestPathParseFailed != nil {
			router.hooks.RequestPathParseFailed(r, "GetPetsPetID", "petId", request.ProcessingResult)
		}

		return
	}

	request.Path.PetID = pathPetID

	if err := request.Path.Validate(); err != nil {
		request.ProcessingResult = RequestProcessingResult{error: err, typee: PathValidationFailed}
		if router.hooks.RequestPathValidationFailed != nil {
			router.hooks.RequestPathValidationFailed(r, "GetPetsPetID", request.ProcessingResult)
		}

		return
	}

	if router.hooks.RequestPathParseCompleted != nil {
		router.hooks.RequestPathParseCompleted(r, "GetPetsPetID")
	}

	if router.hooks.RequestParseCompleted != nil {
		router.hooks.RequestParseCompleted(r, "GetPetsPetID")
	}

	return
}

func (router *petsRouter) GetPetsPetID(w http.ResponseWriter, r *http.Request) {
	defer r.Body.Close()

	response := router.service.GetPetsPetID(r.Context(), router.parseGetPetsPetIDRequest(r))

	if response.statusCode() == 302 && response.redirectURL() != "" {
		if router.hooks.RequestRedirectStarted != nil {
			router.hooks.RequestRedirectStarted(r, "GetPetsPetID", response.redirectURL())
		}

		http.Redirect(w, r, response.redirectURL(), 302)

		if router.hooks.ServiceCompleted != nil {
			router.hooks.ServiceCompleted(r, "GetPetsPetID")
		}

		return
	}

	for header, value := range response.headers() {
		w.Header().Set(header, value)
	}

	for _, c := range response.cookies() {
		cookie := c
		http.SetCookie(w, &cookie)
	}

	if router.hooks.RequestProcessingCompleted != nil {
		router.hooks.RequestProcessingCompleted(r, "GetPetsPetID")
	}

	if len(response.contentType()) > 0 {
		w.Header().Set("content-type", response.contentType())
	}

	w.WriteHeader(response.statusCode())

	if response.body() != nil {
		var (
			data []byte
			err  error
		)

		switch response.contentType() {
		case "application/xml":
			data, err = xml.Marshal(response.body())
		case "application/octet-stream":
			var ok bool
			if data, ok = (response.body()).([]byte); !ok {
				err = errors.New("body is not []byte")
			}
		case "text/html":
			data = []byte(fmt.Sprint(response.body()))
		case "application/json":
			fallthrough
		default:
			data, err = json.Marshal(response.body())
		}

		if err != nil {
			if router.hooks.ResponseBodyMarshalFailed != nil {
				router.hooks.ResponseBodyMarshalFailed(w, r, "GetPetsPetID", err)
			}

			return
		}

		if router.hooks.ResponseBodyMarshalCompleted != nil {
			router.hooks.ResponseBodyMarshalCompleted(r, "GetPetsPetID")
		}

		count, err := w.Write(data)
		if err != nil {
			if router.hooks.ResponseBodyWriteFailed != nil {
				router.hooks.ResponseBodyWriteFailed(r, "GetPetsPetID", count, err)
			}

			if router.hooks.ResponseBodyWriteCompleted != nil {
				router.hooks.ResponseBodyWriteCompleted(r, "GetPetsPetID", count)
			}

			return
		}

		if router.hooks.ResponseBodyWriteCompleted != nil {
			router.hooks.ResponseBodyWriteCompleted(r, "GetPetsPetID", count)
		}
	}

	if router.hooks.ServiceCompleted != nil {
		router.hooks.ServiceCompleted(r, "GetPetsPetID")
	}
}

func (router *petsRouter) parseGetPetsRequest(r *http.Request) (request GetPetsRequest) {
	request.ProcessingResult = RequestProcessingResult{typee: ParseSucceed}

	queryLimit := r.URL.Query().Get("limit")
	request.Query.Limit = cast.ToInt(queryLimit)

	if err := request.Query.Validate(); err != nil {
		request.ProcessingResult = RequestProcessingResult{error: err, typee: QueryValidationFailed}
		if router.hooks.RequestQueryValidationFailed != nil {
			router.hooks.RequestQueryValidationFailed(r, "GetPets", request.ProcessingResult)
		}

		return
	}

	if router.hooks.RequestQueryParseCompleted != nil {
		router.hooks.RequestQueryParseCompleted(r, "GetPets")
	}

	if router.hooks.RequestParseCompleted != nil {
		router.hooks.RequestParseCompleted(r, "GetPets")
	}

	return
}

func (router *petsRouter) GetPets(w http.ResponseWriter, r *http.Request) {
	defer r.Body.Close()

	response := router.service.GetPets(r.Context(), router.parseGetPetsRequest(r))

	if response.statusCode() == 302 && response.redirectURL() != "" {
		if router.hooks.RequestRedirectStarted != nil {
			router.hooks.RequestRedirectStarted(r, "GetPets", response.redirectURL())
		}

		http.Redirect(w, r, response.redirectURL(), 302)

		if router.hooks.ServiceCompleted != nil {
			router.hooks.ServiceCompleted(r, "GetPets")
		}

		return
	}

	for header, value := range response.headers() {
		w.Header().Set(header, value)
	}

	for _, c := range response.cookies() {
		cookie := c
		http.SetCookie(w, &cookie)
	}

	if router.hooks.RequestProcessingCompleted != nil {
		router.hooks.RequestProcessingCompleted(r, "GetPets")
	}

	if len(response.contentType()) > 0 {
		w.Header().Set("content-type", response.contentType())
	}

	w.WriteHeader(response.statusCode())

	if response.body() != nil {
		var (
			data []byte
			err  error
		)

		switch response.contentType() {
		case "application/xml":
			data, err = xml.Marshal(response.body())
		case "application/octet-stream":
			var ok bool
			if data, ok = (response.body()).([]byte); !ok {
				err = errors.New("body is not []byte")
			}
		case "text/html":
			data = []byte(fmt.Sprint(response.body()))
		case "application/json":
			fallthrough
		default:
			data, err = json.Marshal(response.body())
		}

		if err != nil {
			if router.hooks.ResponseBodyMarshalFailed != nil {
				router.hooks.ResponseBodyMarshalFailed(w, r, "GetPets", err)
			}

			return
		}

		if router.hooks.ResponseBodyMarshalCompleted != nil {
			router.hooks.ResponseBodyMarshalCompleted(r, "GetPets")
		}

		count, err := w.Write(data)
		if err != nil {
			if router.hooks.ResponseBodyWriteFailed != nil {
				router.hooks.ResponseBodyWriteFailed(r, "GetPets", count, err)
			}

			if router.hooks.ResponseBodyWriteCompleted != nil {
				router.hooks.ResponseBodyWriteCompleted(r, "GetPets", count)
			}

			return
		}

		if router.hooks.ResponseBodyWriteCompleted != nil {
			router.hooks.ResponseBodyWriteCompleted(r, "GetPets", count)
		}
	}

	if router.hooks.ServiceCompleted != nil {
		router.hooks.ServiceCompleted(r, "GetPets")
	}
}

func (router *petsRouter) parsePostPetsRequest(r *http.Request) (request PostPetsRequest) {
	request.ProcessingResult = RequestProcessingResult{typee: ParseSucceed}

	if router.hooks.RequestParseCompleted != nil {
		router.hooks.RequestParseCompleted(r, "PostPets")
	}

	return
}

func (router *petsRouter) PostPets(w http.ResponseWriter, r *http.Request) {
	defer r.Body.Close()

	response := router.service.PostPets(r.Context(), router.parsePostPetsRequest(r))

	if response.statusCode() == 302 && response.redirectURL() != "" {
		if router.hooks.RequestRedirectStarted != nil {
			router.hooks.RequestRedirectStarted(r, "PostPets", response.redirectURL())
		}

		http.Redirect(w, r, response.redirectURL(), 302)

		if router.hooks.ServiceCompleted != nil {
			router.hooks.ServiceCompleted(r, "PostPets")
		}

		return
	}

	for header, value := range response.headers() {
		w.Header().Set(header, value)
	}

	for _, c := range response.cookies() {
		cookie := c
		http.SetCookie(w, &cookie)
	}

	if router.hooks.RequestProcessingCompleted != nil {
		router.hooks.RequestProcessingCompleted(r, "PostPets")
	}

	if len(response.contentType()) > 0 {
		w.Header().Set("content-type", response.contentType())
	}

	w.WriteHeader(response.statusCode())

	if response.body() != nil {
		var (
			data []byte
			err  error
		)

		switch response.contentType() {
		case "application/xml":
			data, err = xml.Marshal(response.body())
		case "application/octet-stream":
			var ok bool
			if data, ok = (response.body()).([]byte); !ok {
				err = errors.New("body is not []byte")
			}
		case "text/html":
			data = []byte(fmt.Sprint(response.body()))
		case "application/json":
			fallthrough
		default:
			data, err = json.Marshal(response.body())
		}

		if err != nil {
			if router.hooks.ResponseBodyMarshalFailed != nil {
				router.hooks.ResponseBodyMarshalFailed(w, r, "PostPets", err)
			}

			return
		}

		if router.hooks.ResponseBodyMarshalCompleted != nil {
			router.hooks.ResponseBodyMarshalCompleted(r, "PostPets")
		}

		count, err := w.Write(data)
		if err != nil {
			if router.hooks.ResponseBodyWriteFailed != nil {
				router.hooks.ResponseBodyWriteFailed(r, "PostPets", count, err)
			}

			if router.hooks.ResponseBodyWriteCompleted != nil {
				router.hooks.ResponseBodyWriteCompleted(r, "PostPets", count)
			}

			return
		}

		if router.hooks.ResponseBodyWriteCompleted != nil {
			router.hooks.ResponseBodyWriteCompleted(r, "PostPets", count)
		}
	}

	if router.hooks.ServiceCompleted != nil {
		router.hooks.ServiceCompleted(r, "PostPets")
	}
}

type response struct {
	statusCode  int
	body        interface{}
	contentType string
	redirectURL string
	headers     map[string]string
	cookies     []http.Cookie
}

type responseInterface interface {
	statusCode() int
	body() interface{}
	contentType() string
	redirectURL() string
	cookies() []http.Cookie
	headers() map[string]string
}

type GetPetsResponse interface {
	responseInterface
	getPetsResponse()
}

type getPetsResponse struct {
	response
}

func (getPetsResponse) getPetsResponse() {}

func (response getPetsResponse) statusCode() int {
	return response.response.statusCode
}

func (response getPetsResponse) body() interface{} {
	return response.response.body
}

func (response getPetsResponse) contentType() string {
	return response.response.contentType
}

func (response getPetsResponse) redirectURL() string {
	return response.response.redirectURL
}

func (response getPetsResponse) headers() map[string]string {
	return response.response.headers
}

func (response getPetsResponse) cookies() []http.Cookie {
	return response.response.cookies
}

type PostPetsResponse interface {
	responseInterface
	postPetsResponse()
}

type postPetsResponse struct {
	response
}

func (postPetsResponse) postPetsResponse() {}

func (response postPetsResponse) statusCode() int {
	return response.response.statusCode
}

func (response postPetsResponse) body() interface{} {
	return response.response.body
}

func (response postPetsResponse) contentType() string {
	return response.response.contentType
}

func (response postPetsResponse) redirectURL() string {
	return response.response.redirectURL
}

func (response postPetsResponse) headers() map[string]string {
	return response.response.headers
}

func (response postPetsResponse) cookies() []http.Cookie {
	return response.response.cookies
}

type GetPetsPetIDResponse interface {
	responseInterface
	getPetsPetIDResponse()
}

type getPetsPetIDResponse struct {
	response
}

func (getPetsPetIDResponse) getPetsPetIDResponse() {}

func (response getPetsPetIDResponse) statusCode() int {
	return response.response.statusCode
}

func (response getPetsPetIDResponse) body() interface{} {
	return response.response.body
}

func (response getPetsPetIDResponse) contentType() string {
	return response.response.contentType
}

func (response getPetsPetIDResponse) redirectURL() string {
	return response.response.redirectURL
}

func (response getPetsPetIDResponse) headers() map[string]string {
	return response.response.headers
}

func (response getPetsPetIDResponse) cookies() []http.Cookie {
	return response.response.cookies
}

type getPetsStatusCodeResponseBuilder struct {
	response
}

func GetPetsResponseBuilder() *getPetsStatusCodeResponseBuilder {
	return new(getPetsStatusCodeResponseBuilder)
}

func (builder *getPetsStatusCodeResponseBuilder) StatusCodedefault() *getPetsdefaultContentTypeBuilder {
	builder.response.statusCode = 0

	return &getPetsdefaultContentTypeBuilder{response: builder.response}
}

type getPetsdefaultContentTypeBuilder struct {
	response
}

type GetPetsdefaultApplicationJsonResponseBuilder struct {
	response
}

func (builder *GetPetsdefaultApplicationJsonResponseBuilder) Build() GetPetsResponse {
	return getPetsResponse{response: builder.response}
}

func (builder *getPetsdefaultContentTypeBuilder) ApplicationJson() *getPetsdefaultApplicationJsonBodyBuilder {
	builder.response.contentType = "application/json"

	return &getPetsdefaultApplicationJsonBodyBuilder{response: builder.response}
}

type getPetsdefaultApplicationJsonBodyBuilder struct {
	response
}

func (builder *getPetsdefaultApplicationJsonBodyBuilder) Body(body Error) *GetPetsdefaultApplicationJsonResponseBuilder {
	builder.response.body = body

	return &GetPetsdefaultApplicationJsonResponseBuilder{response: builder.response}
}

func (builder *getPetsStatusCodeResponseBuilder) StatusCode200() *getPets200HeadersBuilder {
	builder.response.statusCode = 200

	return &getPets200HeadersBuilder{response: builder.response}
}

type GetPets200Headers struct {
	XNext string
}

func (headers GetPets200Headers) toMap() map[string]string {
	return map[string]string{"x-next": cast.ToString(headers.XNext)}
}

type getPets200HeadersBuilder struct {
	response
}

func (builder *getPets200HeadersBuilder) Headers(headers GetPets200Headers) *getPets200ContentTypeBuilder {
	builder.headers = headers.toMap()

	return &getPets200ContentTypeBuilder{response: builder.response}
}

type getPets200ContentTypeBuilder struct {
	response
}

type GetPets200ApplicationJsonResponseBuilder struct {
	response
}

func (builder *GetPets200ApplicationJsonResponseBuilder) Build() GetPetsResponse {
	return getPetsResponse{response: builder.response}
}

func (builder *getPets200ContentTypeBuilder) ApplicationJson() *getPets200ApplicationJsonBodyBuilder {
	builder.response.contentType = "application/json"

	return &getPets200ApplicationJsonBodyBuilder{response: builder.response}
}

type getPets200ApplicationJsonBodyBuilder struct {
	response
}

func (builder *getPets200ApplicationJsonBodyBuilder) Body(body Pets) *GetPets200ApplicationJsonResponseBuilder {
	builder.response.body = body

	return &GetPets200ApplicationJsonResponseBuilder{response: builder.response}
}

type postPetsStatusCodeResponseBuilder struct {
	response
}

func PostPetsResponseBuilder() *postPetsStatusCodeResponseBuilder {
	return new(postPetsStatusCodeResponseBuilder)
}

func (builder *postPetsStatusCodeResponseBuilder) StatusCode201() *PostPets201ResponseBuilder {
	builder.response.statusCode = 201

	return &PostPets201ResponseBuilder{response: builder.response}
}

type PostPets201ResponseBuilder struct {
	response
}

func (builder *PostPets201ResponseBuilder) Build() PostPetsResponse {
	return postPetsResponse{response: builder.response}
}

func (builder *postPetsStatusCodeResponseBuilder) StatusCodedefault() *postPetsdefaultContentTypeBuilder {
	builder.response.statusCode = 0

	return &postPetsdefaultContentTypeBuilder{response: builder.response}
}

type postPetsdefaultContentTypeBuilder struct {
	response
}

type PostPetsdefaultApplicationJsonResponseBuilder struct {
	response
}

func (builder *PostPetsdefaultApplicationJsonResponseBuilder) Build() PostPetsResponse {
	return postPetsResponse{response: builder.response}
}

func (builder *postPetsdefaultContentTypeBuilder) ApplicationJson() *postPetsdefaultApplicationJsonBodyBuilder {
	builder.response.contentType = "application/json"

	return &postPetsdefaultApplicationJsonBodyBuilder{response: builder.response}
}

type postPetsdefaultApplicationJsonBodyBuilder struct {
	response
}

func (builder *postPetsdefaultApplicationJsonBodyBuilder) Body(body Error) *PostPetsdefaultApplicationJsonResponseBuilder {
	builder.response.body = body

	return &PostPetsdefaultApplicationJsonResponseBuilder{response: builder.response}
}

type getPetsPetIDStatusCodeResponseBuilder struct {
	response
}

func GetPetsPetIDResponseBuilder() *getPetsPetIDStatusCodeResponseBuilder {
	return new(getPetsPetIDStatusCodeResponseBuilder)
}

func (builder *getPetsPetIDStatusCodeResponseBuilder) StatusCode200() *getPetsPetID200ContentTypeBuilder {
	builder.response.statusCode = 200

	return &getPetsPetID200ContentTypeBuilder{response: builder.response}
}

type getPetsPetID200ContentTypeBuilder struct {
	response
}

type GetPetsPetID200ApplicationJsonResponseBuilder struct {
	response
}

func (builder *GetPetsPetID200ApplicationJsonResponseBuilder) Build() GetPetsPetIDResponse {
	return getPetsPetIDResponse{response: builder.response}
}

func (builder *getPetsPetID200ContentTypeBuilder) ApplicationJson() *getPetsPetID200ApplicationJsonBodyBuilder {
	builder.response.contentType = "application/json"

	return &getPetsPetID200ApplicationJsonBodyBuilder{response: builder.response}
}

type getPetsPetID200ApplicationJsonBodyBuilder struct {
	response
}

func (builder *getPetsPetID200ApplicationJsonBodyBuilder) Body(body Pet) *GetPetsPetID200ApplicationJsonResponseBuilder {
	builder.response.body = body

	return &GetPetsPetID200ApplicationJsonResponseBuilder{response: builder.response}
}

func (builder *getPetsPetIDStatusCodeResponseBuilder) StatusCodedefault() *getPetsPetIDdefaultContentTypeBuilder {
	builder.response.statusCode = 0

	return &getPetsPetIDdefaultContentTypeBuilder{response: builder.response}
}

type getPetsPetIDdefaultContentTypeBuilder struct {
	response
}

type GetPetsPetIDdefaultApplicationJsonResponseBuilder struct {
	response
}

func (builder *GetPetsPetIDdefaultApplicationJsonResponseBuilder) Build() GetPetsPetIDResponse {
	return getPetsPetIDResponse{response: builder.response}
}

func (builder *getPetsPetIDdefaultContentTypeBuilder) ApplicationJson() *getPetsPetIDdefaultApplicationJsonBodyBuilder {
	builder.response.contentType = "application/json"

	return &getPetsPetIDdefaultApplicationJsonBodyBuilder{response: builder.response}
}

type getPetsPetIDdefaultApplicationJsonBodyBuilder struct {
	response
}

func (builder *getPetsPetIDdefaultApplicationJsonBodyBuilder) Body(body Error) *GetPetsPetIDdefaultApplicationJsonResponseBuilder {
	builder.response.body = body

	return &GetPetsPetIDdefaultApplicationJsonResponseBuilder{response: builder.response}
}

type PetsService interface {
	GetPetsPetID(context.Context, GetPetsPetIDRequest) GetPetsPetIDResponse
	GetPets(context.Context, GetPetsRequest) GetPetsResponse
	PostPets(context.Context, PostPetsRequest) PostPetsResponse
}

type GetPetsRequestQuery struct {
	Limit int
}

func (query GetPetsRequestQuery) GetLimit() int {
	return query.Limit
}

func (query GetPetsRequestQuery) Validate() error {
	return nil
}

type GetPetsRequest struct {
	Query            GetPetsRequestQuery
	ProcessingResult RequestProcessingResult
}

type PostPetsRequest struct {
	ProcessingResult RequestProcessingResult
}

type GetPetsPetIDRequestPath struct {
	PetID string
}

func (path GetPetsPetIDRequestPath) GetPetID() string {
	return path.PetID
}

func (path GetPetsPetIDRequestPath) Validate() error {
	return nil
}

type GetPetsPetIDRequest struct {
	Path             GetPetsPetIDRequestPath
	ProcessingResult RequestProcessingResult
}

type SecurityScheme string

const ()

type securityProcessor struct {
	scheme  SecurityScheme
	extract func(r *http.Request) (string, string, bool)
	handle  func(r *http.Request, scheme SecurityScheme, name string, value string) error
}

var securityExtractorsFuncs = map[SecurityScheme]func(r *http.Request) (string, string, bool){}

type SecuritySchemas interface{}

type SecurityCheckResult struct {
	Scheme SecurityScheme
	Value  string
}
