// Code generated by ogen, DO NOT EDIT.

package rippling

import (
	"context"

	"go.opentelemetry.io/otel/metric/instrument/syncint64"

	"github.com/ogen-go/ogen/otelogen"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// CustomFieldsGet implements  operation.
	//
	// Returns the custom fields for the given company.
	//
	// GET /custom_fields
	CustomFieldsGet(ctx context.Context, params CustomFieldsGetParams) ([]CustomFields, error)
	// DeleteGroupsGroupId implements delete-groups-groupId operation.
	//
	// Please note, the Groups endpoint requires an OAuth application (i.e. approved 3rd party partners),
	// as the end point is intended for mapping third-party application “Groups” within Rippling
	// organizations.
	// Deletes the specified group.
	//
	// DELETE /groups/{groupId}
	DeleteGroupsGroupId(ctx context.Context, params DeleteGroupsGroupIdParams) (DeleteGroupsGroupIdOK, error)
	// GetCompanies implements get-companies operation.
	//
	// Returns the currently accessible company for the given token. Please note, the returned fields
	// depend on the scopes that are enabled for your access token or API key.
	//
	// GET /companies/current
	GetCompanies(ctx context.Context) (Company, error)
	// GetCompanyActivity implements get-company_activity operation.
	//
	// Retrieves the activity for a given company.
	// The most reliable method to ingest all activity from Rippling is to use a pagination cursor via
	// the 'next' parameter. This will ensure that events are not skipped or duplicated due to the lack
	// of timestamp precision.
	// The most reliable method to ingest all activity from Rippling is to use a pagination cursor via
	// the next parameter. This will ensure that events are not skipped or duplicated due to the lack of
	// timestamp precision.
	// The general sequence of steps to leverage the next parameter:
	// 1. Issue an initial request using startDate with a value set to some date in the last 90 days
	// 2. Retrieve the next page of events through the next value from the response data.
	// 3. Issue the paginated request
	// 4. Retrieve the next page of events through the next value from the response data
	// 5. Pause and repeat the previous step.
	//
	// GET /company_activity
	GetCompanyActivity(ctx context.Context, params GetCompanyActivityParams) (GetCompanyActivityOK, error)
	// GetDepartments implements get-departments operation.
	//
	// Returns a list of departments for the specified company.
	//
	// GET /departments
	GetDepartments(ctx context.Context, params GetDepartmentsParams) ([]Department, error)
	// GetEmployees implements get-employees operation.
	//
	// Retrieves the list of active employees. The fields retrieved depend on the employee scopes that
	// you have access to for your access token or API key. The only guarenteeed fields include id,
	// personalEmail, and roleState.
	//
	// GET /employees
	GetEmployees(ctx context.Context, params GetEmployeesParams) ([]Employee, error)
	// GetEmployeesEmployeeId implements get-employees-employeeId operation.
	//
	// Retrieves the information for a single employee based on the scopes that your API key or access
	// token have access to.
	//
	// GET /employees/{employeeId}
	GetEmployeesEmployeeId(ctx context.Context, params GetEmployeesEmployeeIdParams) (Employee, error)
	// GetEmployeesIncludeTerminated implements get-employees-include_terminated operation.
	//
	// Similar to the active employees endpoint, but this endpoint includes both active and terminated
	// employees.
	//
	// GET /employees/include_terminated
	GetEmployeesIncludeTerminated(ctx context.Context, params GetEmployeesIncludeTerminatedParams) ([]Employee, error)
	// GetGroups implements get-groups operation.
	//
	// Please note, the Groups endpoint requires an OAuth application (i.e. approved 3rd party partners),
	// as the end point is intended for mapping third-party application “Groups” within Rippling
	// organizations.
	// Lists the current third-party groups for an organization.
	//
	// GET /groups
	GetGroups(ctx context.Context) ([]Group, error)
	// GetLeaveRequests implements get-leave_requests operation.
	//
	// Retrieves the current leave requests.The query can be filtered by a number of specific query
	// parameters.
	//
	// GET /leave_requests
	GetLeaveRequests(ctx context.Context, params GetLeaveRequestsParams) ([]LeaveRequest, error)
	// GetLevels implements get-levels operation.
	//
	// Retrieves the levels for the company. Levels are set positions for an organization, such as
	// Manager, or Executive.
	//
	// GET /levels
	GetLevels(ctx context.Context, params GetLevelsParams) ([]Level, error)
	// GetMe implements get-me operation.
	//
	// Retrieves basic information about the Rippling user whose access token you're using. This is
	// generally used for the SSO flow.
	//
	// GET /me
	GetMe(ctx context.Context) (AuthenticatedUserMe, error)
	// GetTeams implements get-teams operation.
	//
	// Retrieves the list of teams for the company.
	//
	// GET /teams
	GetTeams(ctx context.Context, params GetTeamsParams) ([]Team, error)
	// GetWorkLocations implements get-work_locations operation.
	//
	// Returns the list of work locations for a given company.
	//
	// GET /work_locations
	GetWorkLocations(ctx context.Context, params GetWorkLocationsParams) ([]WorkLocation, error)
	// PatchGroupsGroupId implements patch-groups-groupId operation.
	//
	// Please note, the Groups endpoint requires an OAuth application (i.e. approved 3rd party partners),
	// as the end point is intended for mapping third-party application “Groups” within Rippling
	// organizations.
	// Using the PUT method, all of the group fields will be updated, even if the corresponding parameter
	// is missing. If the PATCH method is used, and a param is missing, its value won’t be changed.
	//
	// PATCH /groups/{groupId}
	PatchGroupsGroupId(ctx context.Context, req OptGroupUpdatePayload, params PatchGroupsGroupIdParams) (Group, error)
	// PostAtsCandidatesPushCandidate implements post-ats_candidates-push_candidate operation.
	//
	// Pushes a candidate from an applicant tracking system directly into the Rippling onboarding flow.
	// Please note, this endpoint is only available to applications integrating with OAuth2.0.
	//
	// POST /ats_candidates/push_candidate
	PostAtsCandidatesPushCandidate(ctx context.Context, req OptCandidate) (Candidate, error)
	// PostGroups implements post-groups operation.
	//
	// Creates a generic group, that can be associated within the third-party application.
	//
	// POST /groups
	PostGroups(ctx context.Context, req OptPostGroupsReq) (Group, error)
	// PostMarkAppInstalled implements post-mark_app_installed operation.
	//
	// This endpoint can be hit with an access token in order to mark you app as installed, if you aren't
	// hitting Rippling's other endpoints on installation. The endpoint does not require any scopes.
	// Please note, hitting any other endpoint should mark your app as installed as well.
	//
	// POST /mark_app_installed
	PostMarkAppInstalled(ctx context.Context) (PostMarkAppInstalledOK, error)
	// ProcessLeaveRequests implements process-leave_requests operation.
	//
	// Approve or decline a leave request. Only pending requests can be processed (approved / declined).
	//
	// POST /leave_requests/{id}/process
	ProcessLeaveRequests(ctx context.Context, params ProcessLeaveRequestsParams) (LeaveRequest, error)
	// PutGroupsGroupId implements put-groups-groupId operation.
	//
	// Please note, the Groups endpoint requires an OAuth application (i.e. approved 3rd party partners),
	// as the end point is intended for mapping third-party application “Groups” within Rippling
	// organizations.
	// Using the PUT method, all of the group fields will be updated, even if the corresponding parameter
	// is missing. If the PATCH method is used, and a param is missing, its value won’t be changed.
	//
	// PUT /groups/{groupId}
	PutGroupsGroupId(ctx context.Context, req OptGroupUpdatePayload, params PutGroupsGroupIdParams) (Group, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h   Handler
	cfg config

	requests syncint64.Counter
	errors   syncint64.Counter
	duration syncint64.Histogram
}

func NewServer(h Handler, opts ...Option) (*Server, error) {
	s := &Server{
		h:   h,
		cfg: newConfig(opts...),
	}
	var err error
	if s.requests, err = s.cfg.Meter.SyncInt64().Counter(otelogen.ServerRequestCount); err != nil {
		return nil, err
	}
	if s.errors, err = s.cfg.Meter.SyncInt64().Counter(otelogen.ServerErrorsCount); err != nil {
		return nil, err
	}
	if s.duration, err = s.cfg.Meter.SyncInt64().Histogram(otelogen.ServerDuration); err != nil {
		return nil, err
	}
	return s, nil
}
