// Code generated by ogen, DO NOT EDIT.

package rippling

import (
	"bytes"
	"io"

	"github.com/go-faster/jx"
	"go.opentelemetry.io/otel/trace"
)

func encodePatchGroupsGroupIdRequestJSON(
	req OptGroupUpdatePayload,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)
		if req.Set {
			req.Encode(e)
		}
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodePostAtsCandidatesPushCandidateRequestJSON(
	req OptCandidate,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)
		if req.Set {
			req.Encode(e)
		}
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodePostGroupsRequestJSON(
	req OptPostGroupsReq,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)
		if req.Set {
			req.Encode(e)
		}
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
func encodePutGroupsGroupIdRequestJSON(
	req OptGroupUpdatePayload,
	span trace.Span,
) (
	data func() (io.ReadCloser, error),
	rerr error,
) {
	return func() (io.ReadCloser, error) {
		e := jx.GetEncoder()
		defer jx.PutEncoder(e)
		if req.Set {
			req.Encode(e)
		}
		return io.NopCloser(bytes.NewReader(e.Bytes())), nil
	}, nil
}
