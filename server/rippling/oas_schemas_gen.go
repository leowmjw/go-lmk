// Code generated by ogen, DO NOT EDIT.

package rippling

import (
	"time"

	"github.com/go-faster/jx"
)

// An address object as stored within Rippling.
// Ref: #/components/schemas/Address
type Address struct {
	City        OptString "json:\"city\""
	Country     OptString "json:\"country\""
	State       OptString "json:\"state\""
	StreetLine1 OptString "json:\"streetLine1\""
	StreetLine2 OptString "json:\"streetLine2\""
	Zip         OptString "json:\"zip\""
}

// Information about the Rippling user whose token is being used to access Rippling's API.
// Ref: #/components/schemas/Authenticated-User-(Me)
type AuthenticatedUserMe struct {
	// Unique identifier of the company.
	Company OptString "json:\"company\""
	// Unied identifier of the user (likely an admin).
	ID OptString "json:\"id\""
	// Work email of the user.
	WorkEmail OptString "json:\"workEmail\""
}

// The Rippling candidate model.
// Ref: #/components/schemas/Candidate
type Candidate struct {
	Attachments []CandidateAttachmentsItem "json:\"attachments\""
	// The unique identifier of the candidate from the ATS.
	CandidateId OptString "json:\"candidateId\""
	// A string field of the ofifcial currency doe as listed in ISO 4217.
	Currency OptString "json:\"currency\""
	// The department name as a string.
	Department OptString "json:\"department\""
	// The candidate's email.
	Email OptString "json:\"email\""
	// The ENUM type of employment the user will have within Rippling.
	EmploymentType OptCandidateEmploymentType "json:\"employmentType\""
	// The number of shares that will be given to the candidate.
	EquityShares OptInt "json:\"equityShares\""
	// The candidate's job title.
	JobTitle OptString "json:\"jobTitle\""
	// The candidate's name.
	Name OptString "json:\"name\""
	// The candidate's phone number.
	PhoneNumber OptString "json:\"phoneNumber\""
	// The decimal value that the candidate gets paid every salaryUnit time period.
	SalaryPerUnit OptFloat64 "json:\"salaryPerUnit\""
	// An ENUM string value, denoting the frequency at which the candidate should be paid once the role
	// begins. Note, the PAY_PERIOD ENUM implies the candidate is paid as per a custom pay period.
	SalaryUnit OptCandidateSalaryUnit "json:\"salaryUnit\""
	// The bonus cash given to the candidate as a part of a one time payment, with two decimal digit
	// precision.
	SigningBonus OptFloat64 "json:\"signingBonus\""
	// The would-be start date of the candidate.
	StartDate OptDate "json:\"startDate\""
}

// An array of json objects containing file names and public file URLs containing documents
// pertaining to the candidate.
type CandidateAttachmentsItem struct {
	// The file name.
	FileName OptString "json:\"file_name\""
	// The public URL and name of a pdf/docx/doc/odt file containing documents pertaining to the
	// candidate.
	FileURL OptString "json:\"file_url\""
}

// The ENUM type of employment the user will have within Rippling.
type CandidateEmploymentType string

const (
	CandidateEmploymentTypeCONTRACTOR CandidateEmploymentType = "CONTRACTOR"
	CandidateEmploymentTypeSALARIEDPT CandidateEmploymentType = "SALARIED_PT"
	CandidateEmploymentTypeSALARIEDFT CandidateEmploymentType = "SALARIED_FT"
	CandidateEmploymentTypeHOURLYFT   CandidateEmploymentType = "HOURLY_FT"
	CandidateEmploymentTypeHOURLYPT   CandidateEmploymentType = "HOURLY_PT"
	CandidateEmploymentTypeTEMP       CandidateEmploymentType = "TEMP"
)

// An ENUM string value, denoting the frequency at which the candidate should be paid once the role
// begins. Note, the PAY_PERIOD ENUM implies the candidate is paid as per a custom pay period.
type CandidateSalaryUnit string

const (
	CandidateSalaryUnitHOUR      CandidateSalaryUnit = "HOUR"
	CandidateSalaryUnitDAY       CandidateSalaryUnit = "DAY"
	CandidateSalaryUnitWEEK      CandidateSalaryUnit = "WEEK"
	CandidateSalaryUnitMONTH     CandidateSalaryUnit = "MONTH"
	CandidateSalaryUnitPAYPERIOD CandidateSalaryUnit = "PAY_PERIOD"
)

// A company object as represented within Rippling.
// Ref: #/components/schemas/Company
type Company struct {
	Address       OptNilAddress  "json:\"address\""
	ID            OptString      "json:\"id\""
	Name          OptString      "json:\"name\""
	Phone         OptString      "json:\"phone\""
	PrimaryEmail  OptString      "json:\"primaryEmail\""
	WorkLocations []WorkLocation "json:\"workLocations\""
}

// A Custom Fields object within Rippling.
// Ref: #/components/schemas/CustomFields
type CustomFields struct {
	// The identifier of the specific custom field.
	ID OptString "json:\"Id\""
	// Denotes whether the custom field is or is not mandatory.
	Required OptBool "json:\"required\""
	// The title of the custom field.
	Title OptString "json:\"title\""
	// Denotes the type of the custom field.
	Type OptCustomFieldsType "json:\"type\""
}

// Denotes the type of the custom field.
type CustomFieldsType string

const (
	CustomFieldsTypeTEXT       CustomFieldsType = "TEXT"
	CustomFieldsTypeDATE       CustomFieldsType = "DATE"
	CustomFieldsTypeNUMBER     CustomFieldsType = "NUMBER"
	CustomFieldsTypeCURRENCY   CustomFieldsType = "CURRENCY"
	CustomFieldsTypePERCENTAGE CustomFieldsType = "PERCENTAGE"
	CustomFieldsTypeSELECT     CustomFieldsType = "SELECT"
	CustomFieldsTypeFILE       CustomFieldsType = "FILE"
	CustomFieldsTypeID         CustomFieldsType = "ID"
	CustomFieldsTypeRADIO      CustomFieldsType = "RADIO"
	CustomFieldsTypeTEXTAREA   CustomFieldsType = "TEXTAREA"
)

// DeleteGroupsGroupIdOK is response for DeleteGroupsGroupId operation.
type DeleteGroupsGroupIdOK struct{}

// A company department object.
// Ref: #/components/schemas/Department
type Department struct {
	// Name of the department.
	Name OptString "json:\"name\""
	// Id of the parent department, if one exists.
	Parent OptNilString "json:\"parent\""
}

// An employee model object.
// Ref: #/components/schemas/Employee
type Employee struct {
	CustomFields OptCustomFields "json:\"customFields\""
	// The employee's department name.
	Department OptString "json:\"department\""
	// An ENUM of employment type.
	EmploymentType OptEmployeeEmploymentType "json:\"employmentType\""
	// The employee's end date.
	EndDate OptNilString "json:\"endDate\""
	// First name of the employee.
	FirstName OptString "json:\"firstName\""
	// The employee's gender.
	Gender OptNilEmployeeGender "json:\"gender\""
	// Unique Employee Identifier.
	ID OptString "json:\"id\""
	// The employee's identified gender.
	IdentifiedGender OptNilEmployeeIdentifiedGender "json:\"identifiedGender\""
	// Last name of the employee.
	LastName OptString "json:\"lastName\""
	// The unique identifier of the employee's manager. This value can be null.
	Manager OptString "json:\"manager\""
	// Full name of the employee.
	Name OptString "json:\"name\""
	// The employee's role status - roleState meanings:
	// INIT: An initial record of an individual. An offer has not been made and they have not started
	// working at the company.
	// HIRED: An offer has been made but they have not accepted or started yet.
	// ACCEPTED: An offer has been made and they have accepted, but they have not started yet.
	// ACTIVE: The employee currently works at the company and their start date is today or in the past.
	// TERMINATED: The employee is no longer active.
	RoleState OptEmployeeRoleState "json:\"roleState\""
	SpokeId   OptNilString         "json:\"spokeId\""
	// The employee's work title.
	Title OptString "json:\"title\""
	// The employee's work email.
	WorkEmail    OptNilString  "json:\"workEmail\""
	WorkLocation OptNilAddress "json:\"workLocation\""
}

// An ENUM of employment type.
type EmployeeEmploymentType string

const (
	EmployeeEmploymentTypeCONTRACTOR EmployeeEmploymentType = "CONTRACTOR"
	EmployeeEmploymentTypeSALARIEDFT EmployeeEmploymentType = "SALARIED_FT"
	EmployeeEmploymentTypeSALARIEDPT EmployeeEmploymentType = "SALARIED_PT"
	EmployeeEmploymentTypeHOURLYFT   EmployeeEmploymentType = "HOURLY_FT"
	EmployeeEmploymentTypeHOURLYPT   EmployeeEmploymentType = "HOURLY_PT"
	EmployeeEmploymentTypeTEMP       EmployeeEmploymentType = "TEMP"
)

// The employee's gender.
type EmployeeGender string

const (
	EmployeeGenderMALE   EmployeeGender = "MALE"
	EmployeeGenderFEMALE EmployeeGender = "FEMALE"
)

// The employee's identified gender.
type EmployeeIdentifiedGender string

const (
	EmployeeIdentifiedGenderMALE      EmployeeIdentifiedGender = "MALE"
	EmployeeIdentifiedGenderFEMALE    EmployeeIdentifiedGender = "FEMALE"
	EmployeeIdentifiedGenderNONBINARY EmployeeIdentifiedGender = "NONBINARY"
)

// The employee's role status - roleState meanings:
// INIT: An initial record of an individual. An offer has not been made and they have not started
// working at the company.
// HIRED: An offer has been made but they have not accepted or started yet.
// ACCEPTED: An offer has been made and they have accepted, but they have not started yet.
// ACTIVE: The employee currently works at the company and their start date is today or in the past.
// TERMINATED: The employee is no longer active.
type EmployeeRoleState string

const (
	EmployeeRoleStateINIT       EmployeeRoleState = "INIT"
	EmployeeRoleStateHIRED      EmployeeRoleState = "HIRED"
	EmployeeRoleStateACCEPTED   EmployeeRoleState = "ACCEPTED"
	EmployeeRoleStateACTIVE     EmployeeRoleState = "ACTIVE"
	EmployeeRoleStateTERMINATED EmployeeRoleState = "TERMINATED"
)

// The event model for company activity.
// Please note, the event type can be one of the following:
// - EXTERNAL_ACCONT_CREATE
// - EXTERNAL_ACCOUNT_INVITE
// - EXTERNAL_ACCOUNT_DELETE
// - EXTERNAL_ACCOUNT_SUSPEND
// - EXTERNAL_ACCOUNT_PASSWORD_RESET
// - EXTERNAL_GROUP_ADD
// - EXTERNAL_GROUP_REMOVE
// - EXTERNAL_GROUP_MEMBER_REMOVE
// - EXTERNAL_GROUP_MEMBER_ADD
// - EXTERNAL_SSO_GRANT
// - EXTERNAL_SSO_REVOKE
// - EXTERNAL_SSO_SIGNIN
// - RPASS_ITEM_SHARED
// - RPASS_ITEM_UNSHARED
// - RPASS_ITEM_USED
// - USER_LOGIN_SUCCESS
// - USER_LOGIN_FAILED
// - ACCOUNT_PASSWORD_RESET
// - ACCOUNT_PASSWORD_CHANGED
// - TWO_FACTOR_DEVICE_RESET.
// Ref: #/components/schemas/Event
type Event struct {
	// Unique identifier for the company.
	Company OptString "json:\"company\""
	// Reason for the event, tied to the type of eveent.
	EventReason OptNilEventEventReason "json:\"event_reason\""
	// An ENUM value for the type of the event.
	EventType OptEventEventType "json:\"event_type\""
	// Unique identifier of the event.
	ID OptString "json:\"id\""
	// The actor of the event.
	Initiator OptNilEventInitiator "json:\"initiator\""
	// An array of event identifiers that are linked to the event.
	LinkedEvents []string "json:\"linked_events\""
	// Display name for the event, tied to the type of event.
	Name OptString "json:\"name\""
	// Geographic details from where the event was recorded.
	RequestData OptNilEventRequestData "json:\"request_data\""
	// Unique identifier for the external application for which the event was recorded. This will be Null
	// for events that don't correspond to an external appliction (e.g. Rippling system and RPass events).
	Spoke OptNilString "json:\"spoke\""
	// The list of objects of the event.
	Subjects []EventSubjectsItem "json:\"subjects\""
	// Timestamp at which the event was recorded.
	Timestamp OptString "json:\"timestamp\""
}

// Reason for the event, tied to the type of eveent.
type EventEventReason struct {
	// Message of the event.
	Message OptString "json:\"message\""
	// Reason for the event.
	Reason OptString "json:\"reason\""
}

// An ENUM value for the type of the event.
type EventEventType string

const (
	EventEventTypeEXTERNALACCOUNTCREATE        EventEventType = "EXTERNAL_ACCOUNT_CREATE"
	EventEventTypeEXTERNALACCOUNTINVITE        EventEventType = "EXTERNAL_ACCOUNT_INVITE"
	EventEventTypeEXTERNALACCOUNTDELETE        EventEventType = "EXTERNAL_ACCOUNT_DELETE"
	EventEventTypeEXTERNALACCOUNTSUSPEND       EventEventType = "EXTERNAL_ACCOUNT_SUSPEND"
	EventEventTypeEXTERNALACCOUNTPASSWORDRESET EventEventType = "EXTERNAL_ACCOUNT_PASSWORD_RESET"
	EventEventTypeEXTERNALGROUPADD             EventEventType = "EXTERNAL_GROUP_ADD"
	EventEventTypeEXTERNALGROUPREMOVE          EventEventType = "EXTERNAL_GROUP_REMOVE"
	EventEventTypeEXTERNALSSOGRANT             EventEventType = "EXTERNAL_SSO_GRANT"
	EventEventTypeEXTERNALSSOREVOKE            EventEventType = "EXTERNAL_SSO_REVOKE"
	EventEventTypeEXTERNALSSOSIGNIN            EventEventType = "EXTERNAL_SSO_SIGNIN"
	EventEventTypeRPASSITEMSHARED              EventEventType = "RPASS_ITEM_SHARED"
	EventEventTypeRPASSITEMUNSHARED            EventEventType = "RPASS_ITEM_UNSHARED"
	EventEventTypeRPASSITEMUSED                EventEventType = "RPASS_ITEM_USED"
	EventEventTypeUSERLOGINSUCCESS             EventEventType = "USER_LOGIN_SUCCESS"
	EventEventTypeUSERLOGINFAILED              EventEventType = "USER_LOGIN_FAILED"
	EventEventTypeACCOUNTPASSWORDRESET         EventEventType = "ACCOUNT_PASSWORD_RESET"
	EventEventTypeACCOUNTPASSWORDCHANGED       EventEventType = "ACCOUNT_PASSWORD_CHANGED"
	EventEventTypeTWOFACTORDEVICERESET         EventEventType = "TWO_FACTOR_DEVICE_RESET"
	EventEventTypeEXTERNALGROUPMEMBERREMOVE    EventEventType = "EXTERNAL_GROUP_MEMBER_REMOVE"
)

// The actor of the event.
type EventInitiator struct {
	// The name used within Rippling.
	DisplayName OptString "json:\"display_name\""
	// The icon used within Rippling.
	Icon OptNilString "json:\"icon\""
	// A unique identifier for the employee that initiated the action, if the type is ROLE.
	Role OptNilString "json:\"role\""
	// ENUM value for the type of actor.
	Type OptEventInitiatorType "json:\"type\""
}

// ENUM value for the type of actor.
type EventInitiatorType string

const (
	EventInitiatorTypeROLE     EventInitiatorType = "ROLE"
	EventInitiatorTypeSYSTEM   EventInitiatorType = "SYSTEM"
	EventInitiatorTypeEXTERNAL EventInitiatorType = "EXTERNAL"
)

// Geographic details from where the event was recorded.
type EventRequestData struct {
	// City the event was triggered from.
	City OptString "json:\"city\""
	// Country the event was triggered from.
	Country OptString "json:\"country\""
	// Event IP addresss.
	IP OptString "json:\"ip\""
	// Latitude the event was triggered from.
	Latitude OptString "json:\"latitude\""
	// Longitude the event was triggered from.
	Longitude OptString "json:\"longitude\""
}

type EventSubjectsItem struct {
	// Name used within Rippling.
	DisplayName OptString "json:\"display_name\""
	// Icon used within Rippling.
	Icon OptNilString "json:\"icon\""
	// Unique key for the event object.
	Instance OptString "json:\"instance\""
	// An ENUM value for the type of object.
	Type OptEventSubjectsItemType "json:\"type\""
}

// An ENUM value for the type of object.
type EventSubjectsItemType string

const (
	EventSubjectsItemTypeROLE      EventSubjectsItemType = "ROLE"
	EventSubjectsItemTypeSPOKE     EventSubjectsItemType = "SPOKE"
	EventSubjectsItemTypeRPASSITEM EventSubjectsItemType = "RPASS_ITEM"
	EventSubjectsItemTypeSPOKEUSER EventSubjectsItemType = "SPOKE_USER"
	EventSubjectsItemTypeGROUP     EventSubjectsItemType = "GROUP"
)

type GetCompanyActivityOK struct {
	Data  OptNilGetCompanyActivityOKData "json:\"data\""
	Error OptNilString                   "json:\"error\""
}

type GetCompanyActivityOKData struct {
	Events OptNilEventArray "json:\"events\""
	Next   OptString        "json:\"next\""
}

// Ref: #/components/schemas/Group
type Group struct {
	ID OptString "json:\"id\""
	// User-readable name of a Rippling group.
	Name OptString "json:\"name\""
	// Your id for the group; this should a unique string identifier.
	SpokeId OptNilString "json:\"spokeId\""
	// An array of employee Rippling ids.
	Users []string "json:\"users\""
	// The version unique identifier of the group.
	Version OptString "json:\"version\""
}

// This payload should be used when updating existing groups.
// Ref: #/components/schemas/GroupUpdatePayload
type GroupUpdatePayload struct {
	// The name of the Group.
	Name OptString "json:\"name\""
	// The external identifier of the Group.
	SpokeId OptString "json:\"spokeId\""
	// The array of users within the Group.
	Users []jx.Raw "json:\"users\""
	// The version identifier of the Group.
	Version OptString "json:\"version\""
}

// Leave request object.
// Ref: #/components/schemas/LeaveRequest
type LeaveRequest struct {
	Comments  OptNilString            "json:\"comments\""
	CreatedAt OptString               "json:\"createdAt\""
	Dates     []LeaveRequestDatesItem "json:\"dates\""
	EndDate   OptString               "json:\"endDate\""
	// Unique identifier of the leave request.
	ID                OptString                "json:\"id\""
	LeavePolicy       OptString                "json:\"leavePolicy\""
	LeaveType         OptLeaveRequestLeaveType "json:\"leaveType\""
	NumHours          OptNilInt                "json:\"numHours\""
	NumMinutes        OptNilInt                "json:\"numMinutes\""
	PolicyDisplayName OptString                "json:\"policyDisplayName\""
	ProcessedAt       OptString                "json:\"processedAt\""
	// Unique identifier of the employee who approved or rejected the request. This may be null.
	ProcessedBy     OptString "json:\"processedBy\""
	ProcessedByName OptString "json:\"processedByName\""
	ReasonForLeave  OptString "json:\"reasonForLeave\""
	RequestedBy     OptString "json:\"requestedBy\""
	// Unique identifier of the employee who made the request (in most cases this is the same as role).
	RequestedByName OptString "json:\"requestedByName\""
	// Unique identifier of the employee who is taking leave.
	Role      OptString             "json:\"role\""
	RoleName  OptString             "json:\"roleName\""
	StartDate OptString             "json:\"startDate\""
	Status    OptLeaveRequestStatus "json:\"status\""
	UpdatedAt OptString             "json:\"updatedAt\""
}

type LeaveRequestDatesItem struct {
	Date       OptDate "json:\"date\""
	NumMinutes OptInt  "json:\"numMinutes\""
}

type LeaveRequestLeaveType string

const (
	LeaveRequestLeaveTypeVACATION LeaveRequestLeaveType = "VACATION"
	LeaveRequestLeaveTypeSICK     LeaveRequestLeaveType = "SICK"
	LeaveRequestLeaveTypeJURYDUTY LeaveRequestLeaveType = "JURY_DUTY"
)

type LeaveRequestStatus string

const (
	LeaveRequestStatusPENDING  LeaveRequestStatus = "PENDING"
	LeaveRequestStatusAPPROVED LeaveRequestStatus = "APPROVED"
	LeaveRequestStatusREJECTED LeaveRequestStatus = "REJECTED"
	LeaveRequestStatusCANCELED LeaveRequestStatus = "CANCELED"
)

// Levels enable for self-defined,company-wide position levels, such as Manager, Engineering Manager,
// Executive, etc.
// Ref: #/components/schemas/Level
type Level struct {
	// Unique identifier of the level.
	ID OptString "json:\"id\""
	// Name of the level.
	Name OptString "json:\"name\""
	// The unique identifier of the parent level.
	Parent OptNilString "json:\"parent\""
}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCandidate returns new OptCandidate with value set to v.
func NewOptCandidate(v Candidate) OptCandidate {
	return OptCandidate{
		Value: v,
		Set:   true,
	}
}

// OptCandidate is optional Candidate.
type OptCandidate struct {
	Value Candidate
	Set   bool
}

// IsSet returns true if OptCandidate was set.
func (o OptCandidate) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCandidate) Reset() {
	var v Candidate
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCandidate) SetTo(v Candidate) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCandidate) Get() (v Candidate, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCandidate) Or(d Candidate) Candidate {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCandidateEmploymentType returns new OptCandidateEmploymentType with value set to v.
func NewOptCandidateEmploymentType(v CandidateEmploymentType) OptCandidateEmploymentType {
	return OptCandidateEmploymentType{
		Value: v,
		Set:   true,
	}
}

// OptCandidateEmploymentType is optional CandidateEmploymentType.
type OptCandidateEmploymentType struct {
	Value CandidateEmploymentType
	Set   bool
}

// IsSet returns true if OptCandidateEmploymentType was set.
func (o OptCandidateEmploymentType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCandidateEmploymentType) Reset() {
	var v CandidateEmploymentType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCandidateEmploymentType) SetTo(v CandidateEmploymentType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCandidateEmploymentType) Get() (v CandidateEmploymentType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCandidateEmploymentType) Or(d CandidateEmploymentType) CandidateEmploymentType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCandidateSalaryUnit returns new OptCandidateSalaryUnit with value set to v.
func NewOptCandidateSalaryUnit(v CandidateSalaryUnit) OptCandidateSalaryUnit {
	return OptCandidateSalaryUnit{
		Value: v,
		Set:   true,
	}
}

// OptCandidateSalaryUnit is optional CandidateSalaryUnit.
type OptCandidateSalaryUnit struct {
	Value CandidateSalaryUnit
	Set   bool
}

// IsSet returns true if OptCandidateSalaryUnit was set.
func (o OptCandidateSalaryUnit) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCandidateSalaryUnit) Reset() {
	var v CandidateSalaryUnit
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCandidateSalaryUnit) SetTo(v CandidateSalaryUnit) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCandidateSalaryUnit) Get() (v CandidateSalaryUnit, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCandidateSalaryUnit) Or(d CandidateSalaryUnit) CandidateSalaryUnit {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCustomFields returns new OptCustomFields with value set to v.
func NewOptCustomFields(v CustomFields) OptCustomFields {
	return OptCustomFields{
		Value: v,
		Set:   true,
	}
}

// OptCustomFields is optional CustomFields.
type OptCustomFields struct {
	Value CustomFields
	Set   bool
}

// IsSet returns true if OptCustomFields was set.
func (o OptCustomFields) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCustomFields) Reset() {
	var v CustomFields
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCustomFields) SetTo(v CustomFields) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCustomFields) Get() (v CustomFields, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCustomFields) Or(d CustomFields) CustomFields {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCustomFieldsType returns new OptCustomFieldsType with value set to v.
func NewOptCustomFieldsType(v CustomFieldsType) OptCustomFieldsType {
	return OptCustomFieldsType{
		Value: v,
		Set:   true,
	}
}

// OptCustomFieldsType is optional CustomFieldsType.
type OptCustomFieldsType struct {
	Value CustomFieldsType
	Set   bool
}

// IsSet returns true if OptCustomFieldsType was set.
func (o OptCustomFieldsType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCustomFieldsType) Reset() {
	var v CustomFieldsType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCustomFieldsType) SetTo(v CustomFieldsType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCustomFieldsType) Get() (v CustomFieldsType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCustomFieldsType) Or(d CustomFieldsType) CustomFieldsType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDate returns new OptDate with value set to v.
func NewOptDate(v time.Time) OptDate {
	return OptDate{
		Value: v,
		Set:   true,
	}
}

// OptDate is optional time.Time.
type OptDate struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDate was set.
func (o OptDate) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDate) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDate) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDate) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDate) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptEmployeeEmploymentType returns new OptEmployeeEmploymentType with value set to v.
func NewOptEmployeeEmploymentType(v EmployeeEmploymentType) OptEmployeeEmploymentType {
	return OptEmployeeEmploymentType{
		Value: v,
		Set:   true,
	}
}

// OptEmployeeEmploymentType is optional EmployeeEmploymentType.
type OptEmployeeEmploymentType struct {
	Value EmployeeEmploymentType
	Set   bool
}

// IsSet returns true if OptEmployeeEmploymentType was set.
func (o OptEmployeeEmploymentType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptEmployeeEmploymentType) Reset() {
	var v EmployeeEmploymentType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptEmployeeEmploymentType) SetTo(v EmployeeEmploymentType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptEmployeeEmploymentType) Get() (v EmployeeEmploymentType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptEmployeeEmploymentType) Or(d EmployeeEmploymentType) EmployeeEmploymentType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptEmployeeRoleState returns new OptEmployeeRoleState with value set to v.
func NewOptEmployeeRoleState(v EmployeeRoleState) OptEmployeeRoleState {
	return OptEmployeeRoleState{
		Value: v,
		Set:   true,
	}
}

// OptEmployeeRoleState is optional EmployeeRoleState.
type OptEmployeeRoleState struct {
	Value EmployeeRoleState
	Set   bool
}

// IsSet returns true if OptEmployeeRoleState was set.
func (o OptEmployeeRoleState) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptEmployeeRoleState) Reset() {
	var v EmployeeRoleState
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptEmployeeRoleState) SetTo(v EmployeeRoleState) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptEmployeeRoleState) Get() (v EmployeeRoleState, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptEmployeeRoleState) Or(d EmployeeRoleState) EmployeeRoleState {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptEventEventType returns new OptEventEventType with value set to v.
func NewOptEventEventType(v EventEventType) OptEventEventType {
	return OptEventEventType{
		Value: v,
		Set:   true,
	}
}

// OptEventEventType is optional EventEventType.
type OptEventEventType struct {
	Value EventEventType
	Set   bool
}

// IsSet returns true if OptEventEventType was set.
func (o OptEventEventType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptEventEventType) Reset() {
	var v EventEventType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptEventEventType) SetTo(v EventEventType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptEventEventType) Get() (v EventEventType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptEventEventType) Or(d EventEventType) EventEventType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptEventInitiatorType returns new OptEventInitiatorType with value set to v.
func NewOptEventInitiatorType(v EventInitiatorType) OptEventInitiatorType {
	return OptEventInitiatorType{
		Value: v,
		Set:   true,
	}
}

// OptEventInitiatorType is optional EventInitiatorType.
type OptEventInitiatorType struct {
	Value EventInitiatorType
	Set   bool
}

// IsSet returns true if OptEventInitiatorType was set.
func (o OptEventInitiatorType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptEventInitiatorType) Reset() {
	var v EventInitiatorType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptEventInitiatorType) SetTo(v EventInitiatorType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptEventInitiatorType) Get() (v EventInitiatorType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptEventInitiatorType) Or(d EventInitiatorType) EventInitiatorType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptEventSubjectsItemType returns new OptEventSubjectsItemType with value set to v.
func NewOptEventSubjectsItemType(v EventSubjectsItemType) OptEventSubjectsItemType {
	return OptEventSubjectsItemType{
		Value: v,
		Set:   true,
	}
}

// OptEventSubjectsItemType is optional EventSubjectsItemType.
type OptEventSubjectsItemType struct {
	Value EventSubjectsItemType
	Set   bool
}

// IsSet returns true if OptEventSubjectsItemType was set.
func (o OptEventSubjectsItemType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptEventSubjectsItemType) Reset() {
	var v EventSubjectsItemType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptEventSubjectsItemType) SetTo(v EventSubjectsItemType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptEventSubjectsItemType) Get() (v EventSubjectsItemType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptEventSubjectsItemType) Or(d EventSubjectsItemType) EventSubjectsItemType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFloat64 returns new OptFloat64 with value set to v.
func NewOptFloat64(v float64) OptFloat64 {
	return OptFloat64{
		Value: v,
		Set:   true,
	}
}

// OptFloat64 is optional float64.
type OptFloat64 struct {
	Value float64
	Set   bool
}

// IsSet returns true if OptFloat64 was set.
func (o OptFloat64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFloat64) Reset() {
	var v float64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFloat64) SetTo(v float64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFloat64) Get() (v float64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFloat64) Or(d float64) float64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGroupUpdatePayload returns new OptGroupUpdatePayload with value set to v.
func NewOptGroupUpdatePayload(v GroupUpdatePayload) OptGroupUpdatePayload {
	return OptGroupUpdatePayload{
		Value: v,
		Set:   true,
	}
}

// OptGroupUpdatePayload is optional GroupUpdatePayload.
type OptGroupUpdatePayload struct {
	Value GroupUpdatePayload
	Set   bool
}

// IsSet returns true if OptGroupUpdatePayload was set.
func (o OptGroupUpdatePayload) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGroupUpdatePayload) Reset() {
	var v GroupUpdatePayload
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGroupUpdatePayload) SetTo(v GroupUpdatePayload) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGroupUpdatePayload) Get() (v GroupUpdatePayload, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGroupUpdatePayload) Or(d GroupUpdatePayload) GroupUpdatePayload {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptLeaveRequestLeaveType returns new OptLeaveRequestLeaveType with value set to v.
func NewOptLeaveRequestLeaveType(v LeaveRequestLeaveType) OptLeaveRequestLeaveType {
	return OptLeaveRequestLeaveType{
		Value: v,
		Set:   true,
	}
}

// OptLeaveRequestLeaveType is optional LeaveRequestLeaveType.
type OptLeaveRequestLeaveType struct {
	Value LeaveRequestLeaveType
	Set   bool
}

// IsSet returns true if OptLeaveRequestLeaveType was set.
func (o OptLeaveRequestLeaveType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptLeaveRequestLeaveType) Reset() {
	var v LeaveRequestLeaveType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptLeaveRequestLeaveType) SetTo(v LeaveRequestLeaveType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptLeaveRequestLeaveType) Get() (v LeaveRequestLeaveType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptLeaveRequestLeaveType) Or(d LeaveRequestLeaveType) LeaveRequestLeaveType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptLeaveRequestStatus returns new OptLeaveRequestStatus with value set to v.
func NewOptLeaveRequestStatus(v LeaveRequestStatus) OptLeaveRequestStatus {
	return OptLeaveRequestStatus{
		Value: v,
		Set:   true,
	}
}

// OptLeaveRequestStatus is optional LeaveRequestStatus.
type OptLeaveRequestStatus struct {
	Value LeaveRequestStatus
	Set   bool
}

// IsSet returns true if OptLeaveRequestStatus was set.
func (o OptLeaveRequestStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptLeaveRequestStatus) Reset() {
	var v LeaveRequestStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptLeaveRequestStatus) SetTo(v LeaveRequestStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptLeaveRequestStatus) Get() (v LeaveRequestStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptLeaveRequestStatus) Or(d LeaveRequestStatus) LeaveRequestStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilAddress returns new OptNilAddress with value set to v.
func NewOptNilAddress(v Address) OptNilAddress {
	return OptNilAddress{
		Value: v,
		Set:   true,
	}
}

// OptNilAddress is optional nullable Address.
type OptNilAddress struct {
	Value Address
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilAddress was set.
func (o OptNilAddress) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilAddress) Reset() {
	var v Address
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilAddress) SetTo(v Address) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilAddress) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o OptNilAddress) Get() (v Address, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilAddress) Or(d Address) Address {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilEmployeeGender returns new OptNilEmployeeGender with value set to v.
func NewOptNilEmployeeGender(v EmployeeGender) OptNilEmployeeGender {
	return OptNilEmployeeGender{
		Value: v,
		Set:   true,
	}
}

// OptNilEmployeeGender is optional nullable EmployeeGender.
type OptNilEmployeeGender struct {
	Value EmployeeGender
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilEmployeeGender was set.
func (o OptNilEmployeeGender) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilEmployeeGender) Reset() {
	var v EmployeeGender
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilEmployeeGender) SetTo(v EmployeeGender) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilEmployeeGender) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o OptNilEmployeeGender) Get() (v EmployeeGender, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilEmployeeGender) Or(d EmployeeGender) EmployeeGender {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilEmployeeIdentifiedGender returns new OptNilEmployeeIdentifiedGender with value set to v.
func NewOptNilEmployeeIdentifiedGender(v EmployeeIdentifiedGender) OptNilEmployeeIdentifiedGender {
	return OptNilEmployeeIdentifiedGender{
		Value: v,
		Set:   true,
	}
}

// OptNilEmployeeIdentifiedGender is optional nullable EmployeeIdentifiedGender.
type OptNilEmployeeIdentifiedGender struct {
	Value EmployeeIdentifiedGender
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilEmployeeIdentifiedGender was set.
func (o OptNilEmployeeIdentifiedGender) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilEmployeeIdentifiedGender) Reset() {
	var v EmployeeIdentifiedGender
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilEmployeeIdentifiedGender) SetTo(v EmployeeIdentifiedGender) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilEmployeeIdentifiedGender) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o OptNilEmployeeIdentifiedGender) Get() (v EmployeeIdentifiedGender, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilEmployeeIdentifiedGender) Or(d EmployeeIdentifiedGender) EmployeeIdentifiedGender {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilEventArray returns new OptNilEventArray with value set to v.
func NewOptNilEventArray(v []Event) OptNilEventArray {
	return OptNilEventArray{
		Value: v,
		Set:   true,
	}
}

// OptNilEventArray is optional nullable []Event.
type OptNilEventArray struct {
	Value []Event
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilEventArray was set.
func (o OptNilEventArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilEventArray) Reset() {
	var v []Event
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilEventArray) SetTo(v []Event) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilEventArray) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o OptNilEventArray) Get() (v []Event, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilEventArray) Or(d []Event) []Event {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilEventEventReason returns new OptNilEventEventReason with value set to v.
func NewOptNilEventEventReason(v EventEventReason) OptNilEventEventReason {
	return OptNilEventEventReason{
		Value: v,
		Set:   true,
	}
}

// OptNilEventEventReason is optional nullable EventEventReason.
type OptNilEventEventReason struct {
	Value EventEventReason
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilEventEventReason was set.
func (o OptNilEventEventReason) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilEventEventReason) Reset() {
	var v EventEventReason
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilEventEventReason) SetTo(v EventEventReason) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilEventEventReason) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o OptNilEventEventReason) Get() (v EventEventReason, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilEventEventReason) Or(d EventEventReason) EventEventReason {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilEventInitiator returns new OptNilEventInitiator with value set to v.
func NewOptNilEventInitiator(v EventInitiator) OptNilEventInitiator {
	return OptNilEventInitiator{
		Value: v,
		Set:   true,
	}
}

// OptNilEventInitiator is optional nullable EventInitiator.
type OptNilEventInitiator struct {
	Value EventInitiator
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilEventInitiator was set.
func (o OptNilEventInitiator) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilEventInitiator) Reset() {
	var v EventInitiator
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilEventInitiator) SetTo(v EventInitiator) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilEventInitiator) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o OptNilEventInitiator) Get() (v EventInitiator, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilEventInitiator) Or(d EventInitiator) EventInitiator {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilEventRequestData returns new OptNilEventRequestData with value set to v.
func NewOptNilEventRequestData(v EventRequestData) OptNilEventRequestData {
	return OptNilEventRequestData{
		Value: v,
		Set:   true,
	}
}

// OptNilEventRequestData is optional nullable EventRequestData.
type OptNilEventRequestData struct {
	Value EventRequestData
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilEventRequestData was set.
func (o OptNilEventRequestData) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilEventRequestData) Reset() {
	var v EventRequestData
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilEventRequestData) SetTo(v EventRequestData) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilEventRequestData) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o OptNilEventRequestData) Get() (v EventRequestData, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilEventRequestData) Or(d EventRequestData) EventRequestData {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilGetCompanyActivityOKData returns new OptNilGetCompanyActivityOKData with value set to v.
func NewOptNilGetCompanyActivityOKData(v GetCompanyActivityOKData) OptNilGetCompanyActivityOKData {
	return OptNilGetCompanyActivityOKData{
		Value: v,
		Set:   true,
	}
}

// OptNilGetCompanyActivityOKData is optional nullable GetCompanyActivityOKData.
type OptNilGetCompanyActivityOKData struct {
	Value GetCompanyActivityOKData
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilGetCompanyActivityOKData was set.
func (o OptNilGetCompanyActivityOKData) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilGetCompanyActivityOKData) Reset() {
	var v GetCompanyActivityOKData
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilGetCompanyActivityOKData) SetTo(v GetCompanyActivityOKData) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilGetCompanyActivityOKData) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o OptNilGetCompanyActivityOKData) Get() (v GetCompanyActivityOKData, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilGetCompanyActivityOKData) Or(d GetCompanyActivityOKData) GetCompanyActivityOKData {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilInt returns new OptNilInt with value set to v.
func NewOptNilInt(v int) OptNilInt {
	return OptNilInt{
		Value: v,
		Set:   true,
	}
}

// OptNilInt is optional nullable int.
type OptNilInt struct {
	Value int
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilInt was set.
func (o OptNilInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilInt) SetTo(v int) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilInt) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o OptNilInt) Get() (v int, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilString returns new OptNilString with value set to v.
func NewOptNilString(v string) OptNilString {
	return OptNilString{
		Value: v,
		Set:   true,
	}
}

// OptNilString is optional nullable string.
type OptNilString struct {
	Value string
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilString was set.
func (o OptNilString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilString) Reset() {
	var v string
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilString) SetTo(v string) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilString) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o OptNilString) Get() (v string, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPostGroupsReq returns new OptPostGroupsReq with value set to v.
func NewOptPostGroupsReq(v PostGroupsReq) OptPostGroupsReq {
	return OptPostGroupsReq{
		Value: v,
		Set:   true,
	}
}

// OptPostGroupsReq is optional PostGroupsReq.
type OptPostGroupsReq struct {
	Value PostGroupsReq
	Set   bool
}

// IsSet returns true if OptPostGroupsReq was set.
func (o OptPostGroupsReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPostGroupsReq) Reset() {
	var v PostGroupsReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPostGroupsReq) SetTo(v PostGroupsReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPostGroupsReq) Get() (v PostGroupsReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPostGroupsReq) Or(d PostGroupsReq) PostGroupsReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

type PostGroupsReq struct {
	// User-readable name of the group.
	Name OptString "json:\"name\""
	// The unique ID for the group, this can be the unique identifier for the group entity object within
	// your application.
	SpokeId OptString "json:\"spokeId\""
	// An array of Rippling IDs that will be in the group.
	Users []string "json:\"users\""
}

type PostMarkAppInstalledOK struct {
	Ok bool "json:\"ok\""
}

type ProcessLeaveRequestsAction string

const (
	ProcessLeaveRequestsActionApprove ProcessLeaveRequestsAction = "approve"
	ProcessLeaveRequestsActionDecline ProcessLeaveRequestsAction = "decline"
)

// A team is a self-defined group of employees within Rippling.
// Ref: #/components/schemas/Team
type Team struct {
	// The identifier of the team.
	ID OptString "json:\"id\""
	// The name of the team.
	Name OptString "json:\"name\""
	// The parent team (if this team is a subteam within a larger team).
	Parent OptNilString "json:\"parent\""
}

// A work location object.
// Ref: #/components/schemas/WorkLocation
type WorkLocation struct {
	Address  OptNilAddress "json:\"address\""
	Nickname OptString     "json:\"nickname\""
}
