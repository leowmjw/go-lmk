// Code generated by ogen, DO NOT EDIT.

package rippling

import (
	"fmt"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/validate"
)

func (s Candidate) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.EmploymentType.Set {
			if err := func() error {
				if err := s.EmploymentType.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "employmentType",
			Error: err,
		})
	}
	if err := func() error {
		if s.SalaryPerUnit.Set {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(s.SalaryPerUnit.Value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "salaryPerUnit",
			Error: err,
		})
	}
	if err := func() error {
		if s.SalaryUnit.Set {
			if err := func() error {
				if err := s.SalaryUnit.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "salaryUnit",
			Error: err,
		})
	}
	if err := func() error {
		if s.SigningBonus.Set {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(s.SigningBonus.Value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "signingBonus",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s CandidateEmploymentType) Validate() error {
	switch s {
	case "CONTRACTOR":
		return nil
	case "SALARIED_PT":
		return nil
	case "SALARIED_FT":
		return nil
	case "HOURLY_FT":
		return nil
	case "HOURLY_PT":
		return nil
	case "TEMP":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s CandidateSalaryUnit) Validate() error {
	switch s {
	case "HOUR":
		return nil
	case "DAY":
		return nil
	case "WEEK":
		return nil
	case "MONTH":
		return nil
	case "PAY_PERIOD":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s CustomFields) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Type.Set {
			if err := func() error {
				if err := s.Type.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s CustomFieldsType) Validate() error {
	switch s {
	case "TEXT":
		return nil
	case "DATE":
		return nil
	case "NUMBER":
		return nil
	case "CURRENCY":
		return nil
	case "PERCENTAGE":
		return nil
	case "SELECT":
		return nil
	case "FILE":
		return nil
	case "ID":
		return nil
	case "RADIO":
		return nil
	case "TEXTAREA":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s Employee) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.CustomFields.Set {
			if err := func() error {
				if err := s.CustomFields.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "customFields",
			Error: err,
		})
	}
	if err := func() error {
		if s.EmploymentType.Set {
			if err := func() error {
				if err := s.EmploymentType.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "employmentType",
			Error: err,
		})
	}
	if err := func() error {
		if s.Gender.Set {
			if err := func() error {
				if err := s.Gender.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "gender",
			Error: err,
		})
	}
	if err := func() error {
		if s.IdentifiedGender.Set {
			if err := func() error {
				if err := s.IdentifiedGender.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "identifiedGender",
			Error: err,
		})
	}
	if err := func() error {
		if s.RoleState.Set {
			if err := func() error {
				if err := s.RoleState.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "roleState",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s EmployeeEmploymentType) Validate() error {
	switch s {
	case "CONTRACTOR":
		return nil
	case "SALARIED_FT":
		return nil
	case "SALARIED_PT":
		return nil
	case "HOURLY_FT":
		return nil
	case "HOURLY_PT":
		return nil
	case "TEMP":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s EmployeeGender) Validate() error {
	switch s {
	case "MALE":
		return nil
	case "FEMALE":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s EmployeeIdentifiedGender) Validate() error {
	switch s {
	case "MALE":
		return nil
	case "FEMALE":
		return nil
	case "NONBINARY":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s EmployeeRoleState) Validate() error {
	switch s {
	case "INIT":
		return nil
	case "HIRED":
		return nil
	case "ACCEPTED":
		return nil
	case "ACTIVE":
		return nil
	case "TERMINATED":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s Event) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.EventType.Set {
			if err := func() error {
				if err := s.EventType.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "event_type",
			Error: err,
		})
	}
	if err := func() error {
		if s.Initiator.Set {
			if err := func() error {
				if err := s.Initiator.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "initiator",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Subjects {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "subjects",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s EventEventType) Validate() error {
	switch s {
	case "EXTERNAL_ACCOUNT_CREATE":
		return nil
	case "EXTERNAL_ACCOUNT_INVITE":
		return nil
	case "EXTERNAL_ACCOUNT_DELETE":
		return nil
	case "EXTERNAL_ACCOUNT_SUSPEND":
		return nil
	case "EXTERNAL_ACCOUNT_PASSWORD_RESET":
		return nil
	case "EXTERNAL_GROUP_ADD":
		return nil
	case "EXTERNAL_GROUP_REMOVE":
		return nil
	case "EXTERNAL_SSO_GRANT":
		return nil
	case "EXTERNAL_SSO_REVOKE":
		return nil
	case "EXTERNAL_SSO_SIGNIN":
		return nil
	case "RPASS_ITEM_SHARED":
		return nil
	case "RPASS_ITEM_UNSHARED":
		return nil
	case "RPASS_ITEM_USED":
		return nil
	case "USER_LOGIN_SUCCESS":
		return nil
	case "USER_LOGIN_FAILED":
		return nil
	case "ACCOUNT_PASSWORD_RESET":
		return nil
	case "ACCOUNT_PASSWORD_CHANGED":
		return nil
	case "TWO_FACTOR_DEVICE_RESET":
		return nil
	case "EXTERNAL_GROUP_MEMBER_REMOVE":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s EventInitiator) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Type.Set {
			if err := func() error {
				if err := s.Type.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s EventInitiatorType) Validate() error {
	switch s {
	case "ROLE":
		return nil
	case "SYSTEM":
		return nil
	case "EXTERNAL":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s EventSubjectsItem) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Type.Set {
			if err := func() error {
				if err := s.Type.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s EventSubjectsItemType) Validate() error {
	switch s {
	case "ROLE":
		return nil
	case "SPOKE":
		return nil
	case "RPASS_ITEM":
		return nil
	case "SPOKE_USER":
		return nil
	case "GROUP":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s GetCompanyActivityOK) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Data.Set {
			if err := func() error {
				if err := s.Data.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "data",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s GetCompanyActivityOKData) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Events.Set {
			if err := func() error {
				if s.Events.Value == nil {
					return errors.New("nil is invalid value")
				}
				var failures []validate.FieldError
				for i, elem := range s.Events.Value {
					if err := func() error {
						if err := elem.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "events",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s LeaveRequest) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.LeaveType.Set {
			if err := func() error {
				if err := s.LeaveType.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "leaveType",
			Error: err,
		})
	}
	if err := func() error {
		if s.Status.Set {
			if err := func() error {
				if err := s.Status.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s LeaveRequestLeaveType) Validate() error {
	switch s {
	case "VACATION":
		return nil
	case "SICK":
		return nil
	case "JURY_DUTY":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s LeaveRequestStatus) Validate() error {
	switch s {
	case "PENDING":
		return nil
	case "APPROVED":
		return nil
	case "REJECTED":
		return nil
	case "CANCELED":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ProcessLeaveRequestsAction) Validate() error {
	switch s {
	case "approve":
		return nil
	case "decline":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
